// "Cable_Thick.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Cable_Thick.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Cable_Thick_version_
const char Cable_Thick_version[4] = { '0','1','9','d' };
#define _Cable_Thick_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Cable_Thick_vertexcount_
const unsigned Cable_Thick_vertexcount = 200;
#define _Cable_Thick_vertexcount_
#endif
#ifndef _Cable_Thick_indexcount_
const unsigned Cable_Thick_indexcount = 1152;
#define _Cable_Thick_indexcount_
#endif
#ifndef _Cable_Thick_materialcount_
const unsigned Cable_Thick_materialcount = 1; // can be used for batched draws
#define _Cable_Thick_materialcount_
#endif
#ifndef _Cable_Thick_meshcount_
const unsigned Cable_Thick_meshcount = 1;
#define _Cable_Thick_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Cable_Thick_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Cable_Thick_vertices[200] =
{
	{	{ -0.257929f, 0.005412f, -0.104308f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.708900f, -0.008500f, 0.705200f }	},
	{	{ -0.252800f, -0.201025f, -0.101651f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.708900f, -0.008700f, 0.705200f }	},
	{	{ -0.216139f, -0.199620f, -0.086432f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.002500f, 0.018400f, 0.999800f }	},
	{	{ -0.221254f, 0.006223f, -0.089081f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.002300f, 0.012800f, 0.999900f }	},
	{	{ -0.179446f, -0.198777f, -0.101614f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.706000f, 0.034700f, 0.707400f }	},
	{	{ -0.184555f, 0.006825f, -0.104260f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.706300f, 0.026600f, 0.707400f }	},
	{	{ -0.164210f, -0.198989f, -0.138294f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.999500f, 0.030600f, -0.000900f }	},
	{	{ -0.169325f, 0.006864f, -0.140943f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.999700f, 0.024800f, -0.000800f }	},
	{	{ -0.179367f, -0.200133f, -0.174990f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.706100f, 0.008500f, -0.708000f }	},
	{	{ -0.184497f, 0.006317f, -0.177646f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.706100f, 0.008400f, -0.708000f }	},
	{	{ -0.216028f, -0.201538f, -0.190209f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000300f, -0.018500f, -0.999800f }	},
	{	{ -0.221172f, 0.005506f, -0.192874f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000400f, -0.012800f, -0.999900f }	},
	{	{ -0.252721f, -0.202381f, -0.175027f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.706000f, -0.034700f, -0.707300f }	},
	{	{ -0.257871f, 0.004905f, -0.177694f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.706200f, -0.026600f, -0.707500f }	},
	{	{ -0.267957f, -0.202169f, -0.138347f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.999500f, -0.030600f, -0.001900f }	},
	{	{ -0.273101f, 0.004865f, -0.141011f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.999700f, -0.024800f, -0.002000f }	},
	{	{ -0.245489f, -0.401669f, -0.096804f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.708900f, -0.009500f, 0.705200f }	},
	{	{ -0.208850f, -0.399657f, -0.081599f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.003000f, 0.029300f, 0.999500f }	},
	{	{ -0.172167f, -0.398539f, -0.096788f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.705300f, 0.050900f, 0.707100f }	},
	{	{ -0.156923f, -0.398968f, -0.133463f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.999100f, 0.042600f, -0.001000f }	},
	{	{ -0.172059f, -0.400695f, -0.170144f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.706100f, 0.009300f, -0.708000f }	},
	{	{ -0.208697f, -0.402707f, -0.185350f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.029400f, -0.999500f }	},
	{	{ -0.245380f, -0.403825f, -0.170161f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.705500f, -0.050900f, -0.706800f }	},
	{	{ -0.260624f, -0.403396f, -0.133486f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.999100f, -0.042700f, -0.001500f }	},
	{	{ -0.236063f, -0.594257f, -0.090111f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.708900f, -0.011500f, 0.705200f }	},
	{	{ -0.199456f, -0.591604f, -0.074928f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.003700f, 0.039600f, 0.999200f }	},
	{	{ -0.162789f, -0.590159f, -0.090128f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.704300f, 0.067500f, 0.706600f }	},
	{	{ -0.147536f, -0.590767f, -0.126796f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.998400f, 0.055800f, -0.001500f }	},
	{	{ -0.162643f, -0.593073f, -0.163458f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.705900f, 0.011300f, -0.708200f }	},
	{	{ -0.199250f, -0.595726f, -0.178641f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000300f, -0.039800f, -0.999200f }	},
	{	{ -0.235917f, -0.597171f, -0.163441f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.704800f, -0.067600f, -0.706100f }	},
	{	{ -0.251170f, -0.596563f, -0.126772f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.998400f, -0.055900f, -0.001000f }	},
	{	{ -0.224590f, -0.776523f, -0.081915f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.708800f, -0.015100f, 0.705300f }	},
	{	{ -0.188028f, -0.773165f, -0.066764f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.004600f, 0.049600f, 0.998700f }	},
	{	{ -0.151386f, -0.771321f, -0.081982f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.703100f, 0.085300f, 0.706000f }	},
	{	{ -0.136125f, -0.772070f, -0.118644f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.997500f, 0.070800f, -0.002100f }	},
	{	{ -0.151193f, -0.774975f, -0.155279f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.705600f, 0.014700f, -0.708500f }	},
	{	{ -0.187755f, -0.778333f, -0.170430f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000600f, -0.049900f, -0.998700f }	},
	{	{ -0.224397f, -0.780177f, -0.155212f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.703800f, -0.085300f, -0.705200f }	},
	{	{ -0.239659f, -0.779428f, -0.118550f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.997500f, -0.070900f, -0.000300f }	},
	{	{ -0.211135f, -0.946213f, -0.072560f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.708500f, -0.020600f, 0.705300f }	},
	{	{ -0.174639f, -0.942043f, -0.057454f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.005800f, 0.059800f, 0.998200f }	},
	{	{ -0.138037f, -0.939696f, -0.072700f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.701300f, 0.105200f, 0.705000f }	},
	{	{ -0.122767f, -0.940547f, -0.109356f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.996000f, 0.088700f, -0.003100f }	},
	{	{ -0.137784f, -0.944098f, -0.145956f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.704900f, 0.020100f, -0.709000f }	},
	{	{ -0.174281f, -0.948268f, -0.161062f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.001000f, -0.060200f, -0.998200f }	},
	{	{ -0.210882f, -0.950615f, -0.145816f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.702400f, -0.105200f, -0.703900f }	},
	{	{ -0.226152f, -0.949764f, -0.109159f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.996000f, -0.088900f, 0.000600f }	},
	{	{ -0.195759f, -1.101090f, -0.062388f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.708100f, -0.029000f, 0.705500f }	},
	{	{ -0.159362f, -1.095932f, -0.047347f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.007600f, 0.070400f, 0.997500f }	},
	{	{ -0.122827f, -1.092927f, -0.062636f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.698600f, 0.128600f, 0.703800f }	},
	{	{ -0.107551f, -1.093833f, -0.099289f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.993800f, 0.111100f, -0.004700f }	},
	{	{ -0.122494f, -1.098122f, -0.135840f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.703700f, 0.028200f, -0.709900f }	},
	{	{ -0.158891f, -1.103279f, -0.150881f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.001400f, -0.071100f, -0.997400f }	},
	{	{ -0.195427f, -1.106284f, -0.135592f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.700300f, -0.128700f, -0.702100f }	},
	{	{ -0.210702f, -1.105378f, -0.098939f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.993800f, -0.111300f, 0.002000f }	},
	{	{ -0.178513f, -1.238948f, -0.051735f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.707200f, -0.041700f, 0.705700f }	},
	{	{ -0.142278f, -1.232514f, -0.036793f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.010300f, 0.082300f, 0.996500f }	},
	{	{ -0.105859f, -1.228602f, -0.052153f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.694400f, 0.158200f, 0.701900f }	},
	{	{ -0.090584f, -1.229504f, -0.088806f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.990000f, 0.140800f, -0.007300f }	},
	{	{ -0.105412f, -1.234692f, -0.125287f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.701400f, 0.040300f, -0.711600f }	},
	{	{ -0.141647f, -1.241126f, -0.140229f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.001900f, -0.083600f, -0.996500f }	},
	{	{ -0.178066f, -1.245038f, -0.124869f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.697000f, -0.158500f, -0.699300f }	},
	{	{ -0.193341f, -1.244137f, -0.088215f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.990000f, -0.141100f, 0.004100f }	},
	{	{ -0.159421f, -1.357659f, -0.040926f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.705200f, -0.061700f, 0.706300f }	},
	{	{ -0.123482f, -1.349433f, -0.026149f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.014800f, 0.096800f, 0.995200f }	},
	{	{ -0.087283f, -1.344187f, -0.041631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.686900f, 0.198800f, 0.699000f }	},
	{	{ -0.072024f, -1.344994f, -0.078294f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.983000f, 0.183200f, -0.011700f }	},
	{	{ -0.086654f, -1.351382f, -0.114664f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.697000f, 0.059200f, -0.714600f }	},
	{	{ -0.122592f, -1.359608f, -0.129441f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.002300f, -0.099200f, -0.995100f }	},
	{	{ -0.158791f, -1.364853f, -0.113958f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.691100f, -0.199400f, -0.694700f }	},
	{	{ -0.174051f, -1.364047f, -0.077296f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.982900f, -0.183900f, 0.007500f }	},
	{	{ -0.138421f, -1.455274f, -0.030252f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.700300f, -0.096400f, 0.707300f }	},
	{	{ -0.103110f, -1.444250f, -0.015788f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.023400f, 0.116100f, 0.993000f }	},
	{	{ -0.067395f, -1.436845f, -0.031511f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.671700f, 0.260400f, 0.693600f }	},
	{	{ -0.052193f, -1.437395f, -0.068202f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.968100f, 0.249700f, -0.020000f }	},
	{	{ -0.066420f, -1.445580f, -0.104371f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.687400f, 0.090500f, -0.720600f }	},
	{	{ -0.101731f, -1.456605f, -0.118836f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.002900f, -0.122000f, -0.992500f }	},
	{	{ -0.137446f, -1.464009f, -0.103112f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.678500f, -0.263000f, -0.685800f }	},
	{	{ -0.152647f, -1.463459f, -0.066422f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.967500f, -0.252400f, 0.014000f }	},
	{	{ -0.115083f, -1.530393f, -0.019875f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.684600f, -0.168600f, 0.709100f }	},
	{	{ -0.081481f, -1.514266f, -0.006147f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.042200f, 0.143900f, 0.988700f }	},
	{	{ -0.047118f, -1.502824f, -0.022453f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.637100f, 0.361700f, 0.680600f }	},
	{	{ -0.032120f, -1.502766f, -0.059232f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.932000f, 0.360500f, -0.036300f }	},
	{	{ -0.045282f, -1.514131f, -0.094942f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.664400f, 0.145600f, -0.733000f }	},
	{	{ -0.078884f, -1.530257f, -0.108670f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.004800f, -0.165000f, -0.986300f }	},
	{	{ -0.113246f, -1.541700f, -0.092364f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.643000f, -0.383600f, -0.662900f }	},
	{	{ -0.128244f, -1.541758f, -0.055585f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.922500f, -0.384900f, 0.029600f }	},
	{	{ -0.086679f, -1.583245f, -0.009246f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.600700f, -0.335200f, 0.725800f }	},
	{	{ -0.060015f, -1.556039f, 0.002000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.091800f, 0.177300f, 0.979900f }	},
	{	{ -0.031228f, -1.535692f, -0.016302f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.603700f, 0.429700f, 0.671400f }	},
	{	{ -0.017180f, -1.534118f, -0.053420f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.904000f, 0.427500f, 0.000200f }	},
	{	{ -0.026106f, -1.552247f, -0.087615f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.574600f, 0.252500f, -0.778400f }	},
	{	{ -0.052770f, -1.579453f, -0.098861f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.031300f, -0.271900f, -0.961800f }	},
	{	{ -0.081557f, -1.599799f, -0.080559f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.486900f, -0.641300f, -0.592900f }	},
	{	{ -0.095606f, -1.601373f, -0.043441f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.741100f, -0.665900f, 0.085500f }	},
	{	{ -0.049959f, -1.606751f, 0.002257f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.369400f, -0.487500f, 0.791100f }	},
	{	{ -0.043444f, -1.567837f, 0.006821f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.271700f, 0.212200f, 0.938700f }	},
	{	{ -0.029709f, -1.538743f, -0.016472f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.080200f, 0.731800f, 0.676700f }	},
	{	{ -0.016802f, -1.536506f, -0.053969f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.251100f, 0.807200f, -0.534200f }	},
	{	{ -0.012284f, -1.562447f, -0.083705f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.350200f, 0.322500f, -0.879400f }	},
	{	{ -0.018799f, -1.601362f, -0.088270f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.218600f, -0.388700f, -0.895000f }	},
	{	{ -0.032533f, -1.630455f, -0.064977f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.038100f, -0.893600f, -0.447200f }	},
	{	{ -0.045441f, -1.632692f, -0.027480f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.275700f, -0.933200f, 0.230400f }	},
	{	{ -0.014500f, -1.600662f, 0.015023f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.177200f, -0.459000f, 0.870500f }	},
	{	{ -0.029209f, -1.563922f, 0.011646f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.499600f, 0.257700f, 0.827000f }	},
	{	{ -0.029383f, -1.536254f, -0.016850f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.764300f, 0.638800f, 0.088100f }	},
	{	{ -0.014925f, -1.533858f, -0.053767f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.426400f, 0.719300f, -0.548400f }	},
	{	{ 0.005700f, -1.558148f, -0.077478f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.187000f, 0.368500f, -0.910600f }	},
	{	{ 0.020409f, -1.594889f, -0.074101f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.478300f, -0.338500f, -0.810300f }	},
	{	{ 0.020583f, -1.622557f, -0.045605f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.461000f, -0.844200f, -0.273600f }	},
	{	{ 0.006125f, -1.624953f, -0.008688f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.197000f, -0.894000f, 0.402300f }	},
	{	{ 0.016406f, -1.577865f, 0.030420f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.111300f, -0.390100f, 0.914000f }	},
	{	{ -0.008776f, -1.548310f, 0.022057f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.610800f, 0.176800f, 0.771800f }	},
	{	{ -0.015123f, -1.524877f, -0.009379f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.753200f, 0.639000f, 0.156200f }	},
	{	{ 0.001073f, -1.521288f, -0.045467f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.427600f, 0.711900f, -0.557000f }	},
	{	{ 0.030334f, -1.539655f, -0.065066f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.157200f, 0.345200f, -0.925300f }	},
	{	{ 0.055516f, -1.569210f, -0.056704f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.629400f, -0.225700f, -0.743500f }	},
	{	{ 0.061863f, -1.592643f, -0.025268f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.735900f, -0.660900f, -0.147100f }	},
	{	{ 0.045667f, -1.596232f, 0.010821f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.436300f, -0.728700f, 0.527800f }	},
	{	{ 0.046786f, -1.536693f, 0.049013f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.074300f, -0.324500f, 0.943000f }	},
	{	{ 0.016320f, -1.513949f, 0.037519f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.668400f, 0.111900f, 0.735300f }	},
	{	{ 0.006504f, -1.494987f, 0.004027f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.870800f, 0.484200f, 0.084600f }	},
	{	{ 0.023077f, -1.490913f, -0.031838f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.544500f, 0.564800f, -0.620100f }	},
	{	{ 0.056341f, -1.504119f, -0.049065f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.109900f, 0.303000f, -0.946600f }	},
	{	{ 0.086806f, -1.526864f, -0.037570f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.689800f, -0.137200f, -0.710900f }	},
	{	{ 0.096623f, -1.545825f, -0.004078f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.866300f, -0.494400f, -0.071200f }	},
	{	{ 0.080050f, -1.549899f, 0.031787f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.554000f, -0.571100f, 0.605700f }	},
	{	{ 0.076157f, -1.475606f, 0.069637f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.052500f, -0.265800f, 0.962600f }	},
	{	{ 0.043040f, -1.458181f, 0.056322f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.694600f, 0.068400f, 0.716100f }	},
	{	{ 0.031318f, -1.443044f, 0.021522f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.930300f, 0.364300f, 0.042500f }	},
	{	{ 0.047846f, -1.439060f, -0.014375f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.607700f, 0.442500f, -0.659400f }	},
	{	{ 0.082953f, -1.448567f, -0.030335f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.078500f, 0.255100f, -0.963700f }	},
	{	{ 0.116070f, -1.465992f, -0.017021f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.712500f, -0.082200f, -0.696800f }	},
	{	{ 0.127792f, -1.481129f, 0.017780f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.928800f, -0.369500f, -0.029600f }	},
	{	{ 0.111264f, -1.485113f, 0.053676f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.614200f, -0.444700f, 0.651800f }	},
	{	{ 0.104191f, -1.392557f, 0.091340f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.039100f, -0.215100f, 0.975800f }	},
	{	{ 0.069664f, -1.379199f, 0.076951f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.706700f, 0.041200f, 0.706300f }	},
	{	{ 0.056848f, -1.367214f, 0.041317f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.961400f, 0.274600f, 0.017800f }	},
	{	{ 0.073241f, -1.363621f, 0.005317f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.643100f, 0.344900f, -0.683700f }	},
	{	{ 0.109249f, -1.370530f, -0.009956f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.058400f, 0.209300f, -0.976100f }	},
	{	{ 0.143776f, -1.383888f, 0.004432f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.721200f, -0.049200f, -0.690900f }	},
	{	{ 0.156592f, -1.395873f, 0.040066f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.960700f, -0.277600f, -0.006400f }	},
	{	{ 0.140199f, -1.399465f, 0.076066f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.647100f, -0.345700f, 0.679500f }	},
	{	{ 0.130460f, -1.285313f, 0.113187f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.030700f, -0.171000f, 0.984800f }	},
	{	{ 0.095140f, -1.275122f, 0.098147f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.712600f, 0.024500f, 0.701100f }	},
	{	{ 0.081670f, -1.265750f, 0.061976f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.978400f, 0.206500f, 0.002900f }	},
	{	{ 0.097930f, -1.262685f, 0.025867f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.663600f, 0.266400f, -0.699000f }	},
	{	{ 0.134406f, -1.267725f, 0.010978f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.045400f, 0.167800f, -0.984700f }	},
	{	{ 0.169727f, -1.277916f, 0.026018f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.724400f, -0.029300f, -0.688700f }	},
	{	{ 0.183196f, -1.287289f, 0.062189f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.978000f, -0.208500f, 0.007000f }	},
	{	{ 0.166936f, -1.290354f, 0.098298f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.666000f, -0.266700f, 0.696600f }	},
	{	{ 0.154455f, -1.151591f, 0.134225f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.025400f, -0.132600f, 0.990800f }	},
	{	{ 0.118671f, -1.143930f, 0.118783f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.715700f, 0.014400f, 0.698300f }	},
	{	{ 0.104800f, -1.136753f, 0.082263f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.988100f, 0.153600f, -0.006100f }	},
	{	{ 0.120955f, -1.134264f, 0.046063f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.675900f, 0.202100f, -0.708700f }	},
	{	{ 0.157683f, -1.137923f, 0.031393f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.036900f, 0.130700f, -0.990700f }	},
	{	{ 0.193467f, -1.145584f, 0.046836f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.725500f, -0.017400f, -0.688000f }	},
	{	{ 0.207339f, -1.152761f, 0.083355f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.987800f, -0.154900f, 0.014800f }	},
	{	{ 0.191184f, -1.155250f, 0.119555f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.677300f, -0.202200f, 0.707300f }	},
	{	{ 0.175619f, -0.989100f, 0.153481f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.022000f, -0.098800f, 0.994800f }	},
	{	{ 0.139561f, -0.983505f, 0.137791f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.717300f, 0.008600f, 0.696700f }	},
	{	{ 0.125441f, -0.978199f, 0.101048f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.993700f, 0.111300f, -0.011700f }	},
	{	{ 0.141519f, -0.976291f, 0.064778f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.683300f, 0.148500f, -0.714800f }	},
	{	{ 0.178387f, -0.978899f, 0.050234f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.031300f, 0.097700f, -0.994700f }	},
	{	{ 0.214445f, -0.984494f, 0.065924f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.725500f, -0.010400f, -0.688000f }	},
	{	{ 0.228565f, -0.989799f, 0.102667f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.993500f, -0.112200f, 0.019400f }	},
	{	{ 0.212487f, -0.991708f, 0.138937f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.684100f, -0.148500f, 0.714000f }	},
	{	{ 0.193369f, -0.795548f, 0.169969f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.020100f, -0.068900f, 0.997400f }	},
	{	{ 0.157151f, -0.791674f, 0.154131f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.718200f, 0.005500f, 0.695800f }	},
	{	{ 0.142880f, -0.787984f, 0.117248f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.996900f, 0.076900f, -0.015100f }	},
	{	{ 0.158905f, -0.786640f, 0.080930f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.687800f, 0.103000f, -0.718600f }	},
	{	{ 0.195850f, -0.788429f, 0.066456f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.027700f, 0.068300f, -0.997300f }	},
	{	{ 0.232068f, -0.792303f, 0.082294f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.725300f, -0.006600f, -0.688400f }	},
	{	{ 0.246339f, -0.795992f, 0.119177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.996700f, -0.077400f, 0.022000f }	},
	{	{ 0.230314f, -0.797337f, 0.155495f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.688200f, -0.103100f, 0.718200f }	},
	{	{ 0.207109f, -0.568651f, 0.182695f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.019100f, -0.042200f, 0.998900f }	},
	{	{ 0.170800f, -0.566234f, 0.166774f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.718800f, 0.004200f, 0.695200f }	},
	{	{ 0.156442f, -0.563954f, 0.129811f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.998700f, 0.048300f, -0.017200f }	},
	{	{ 0.172434f, -0.563145f, 0.093463f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.690300f, 0.064000f, -0.720700f }	},
	{	{ 0.209419f, -0.564283f, 0.079026f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.025500f, 0.041900f, -0.998800f }	},
	{	{ 0.245728f, -0.566700f, 0.094947f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.724900f, -0.004800f, -0.688800f }	},
	{	{ 0.260086f, -0.568981f, 0.131910f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.998500f, -0.048600f, 0.023300f }	},
	{	{ 0.244094f, -0.569789f, 0.168258f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.690500f, -0.064000f, 0.720500f }	},
	{	{ 0.216230f, -0.306128f, 0.190660f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.018700f, -0.018300f, 0.999600f }	},
	{	{ 0.179877f, -0.304961f, 0.174700f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.719200f, 0.004100f, 0.694800f }	},
	{	{ 0.165474f, -0.303921f, 0.137699f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.999500f, 0.024100f, -0.018200f }	},
	{	{ 0.181448f, -0.303618f, 0.101335f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.691600f, 0.030100f, -0.721600f }	},
	{	{ 0.218452f, -0.304228f, 0.086914f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.024100f, 0.018200f, -0.999500f }	},
	{	{ 0.254805f, -0.305395f, 0.102874f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.724500f, -0.004300f, -0.689200f }	},
	{	{ 0.269208f, -0.306435f, 0.139875f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.999400f, -0.024300f, 0.023700f }	},
	{	{ 0.253233f, -0.306739f, 0.176239f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.691600f, -0.030100f, 0.721600f }	},
	{	{ 0.220119f, -0.005695f, 0.192859f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.018700f, -0.007000f, 0.999800f }	},
	{	{ 0.183751f, -0.005625f, 0.176890f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.719500f, 0.004200f, 0.694500f }	},
	{	{ 0.169334f, -0.005694f, 0.139880f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.999700f, 0.013100f, -0.018600f }	},
	{	{ 0.185302f, -0.005863f, 0.103513f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.691900f, 0.014200f, -0.721800f }	},
	{	{ 0.222312f, -0.006033f, 0.089096f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.023500f, 0.007000f, -0.999700f }	},
	{	{ 0.258679f, -0.006103f, 0.105064f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.724300f, -0.004300f, -0.689500f }	},
	{	{ 0.273097f, -0.006034f, 0.142074f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.999600f, -0.013100f, 0.023700f }	},
	{	{ 0.257129f, -0.005865f, 0.178442f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.691800f, -0.014200f, 0.721900f }	},
};
#define _Cable_Thick_vertices_
#endif
#ifndef _Cable_Thick_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Cable_Thick_indices[1152] =
{
	 0, 1, 2,
	 3, 0, 2,
	 3, 2, 4,
	 5, 3, 4,
	 5, 4, 6,
	 7, 5, 6,
	 7, 6, 8,
	 9, 7, 8,
	 9, 8, 10,
	 11, 9, 10,
	 11, 10, 12,
	 13, 11, 12,
	 13, 12, 14,
	 15, 13, 14,
	 15, 14, 1,
	 0, 15, 1,
	 1, 16, 17,
	 2, 1, 17,
	 2, 17, 18,
	 4, 2, 18,
	 4, 18, 19,
	 6, 4, 19,
	 6, 19, 20,
	 8, 6, 20,
	 8, 20, 21,
	 10, 8, 21,
	 10, 21, 22,
	 12, 10, 22,
	 12, 22, 23,
	 14, 12, 23,
	 14, 23, 16,
	 1, 14, 16,
	 16, 24, 25,
	 17, 16, 25,
	 17, 25, 26,
	 18, 17, 26,
	 18, 26, 27,
	 19, 18, 27,
	 19, 27, 28,
	 20, 19, 28,
	 20, 28, 29,
	 21, 20, 29,
	 21, 29, 30,
	 22, 21, 30,
	 22, 30, 31,
	 23, 22, 31,
	 23, 31, 24,
	 16, 23, 24,
	 24, 32, 33,
	 25, 24, 33,
	 25, 33, 34,
	 26, 25, 34,
	 26, 34, 35,
	 27, 26, 35,
	 27, 35, 36,
	 28, 27, 36,
	 28, 36, 37,
	 29, 28, 37,
	 29, 37, 38,
	 30, 29, 38,
	 30, 38, 39,
	 31, 30, 39,
	 31, 39, 32,
	 24, 31, 32,
	 32, 40, 41,
	 33, 32, 41,
	 33, 41, 42,
	 34, 33, 42,
	 34, 42, 43,
	 35, 34, 43,
	 35, 43, 44,
	 36, 35, 44,
	 36, 44, 45,
	 37, 36, 45,
	 37, 45, 46,
	 38, 37, 46,
	 38, 46, 47,
	 39, 38, 47,
	 39, 47, 40,
	 32, 39, 40,
	 40, 48, 49,
	 41, 40, 49,
	 41, 49, 50,
	 42, 41, 50,
	 42, 50, 51,
	 43, 42, 51,
	 43, 51, 52,
	 44, 43, 52,
	 44, 52, 53,
	 45, 44, 53,
	 45, 53, 54,
	 46, 45, 54,
	 46, 54, 55,
	 47, 46, 55,
	 47, 55, 48,
	 40, 47, 48,
	 48, 56, 57,
	 49, 48, 57,
	 49, 57, 58,
	 50, 49, 58,
	 50, 58, 59,
	 51, 50, 59,
	 51, 59, 60,
	 52, 51, 60,
	 52, 60, 61,
	 53, 52, 61,
	 53, 61, 62,
	 54, 53, 62,
	 54, 62, 63,
	 55, 54, 63,
	 55, 63, 56,
	 48, 55, 56,
	 56, 64, 65,
	 57, 56, 65,
	 57, 65, 66,
	 58, 57, 66,
	 58, 66, 67,
	 59, 58, 67,
	 59, 67, 68,
	 60, 59, 68,
	 60, 68, 69,
	 61, 60, 69,
	 61, 69, 70,
	 62, 61, 70,
	 62, 70, 71,
	 63, 62, 71,
	 63, 71, 64,
	 56, 63, 64,
	 64, 72, 73,
	 65, 64, 73,
	 65, 73, 74,
	 66, 65, 74,
	 66, 74, 75,
	 67, 66, 75,
	 67, 75, 76,
	 68, 67, 76,
	 68, 76, 77,
	 69, 68, 77,
	 69, 77, 78,
	 70, 69, 78,
	 70, 78, 79,
	 71, 70, 79,
	 71, 79, 72,
	 64, 71, 72,
	 72, 80, 81,
	 73, 72, 81,
	 73, 81, 82,
	 74, 73, 82,
	 74, 82, 83,
	 75, 74, 83,
	 75, 83, 84,
	 76, 75, 84,
	 84, 85, 77,
	 76, 84, 77,
	 77, 85, 86,
	 78, 77, 86,
	 78, 86, 87,
	 79, 78, 87,
	 79, 87, 80,
	 72, 79, 80,
	 80, 88, 89,
	 81, 80, 89,
	 81, 89, 90,
	 82, 81, 90,
	 82, 90, 91,
	 83, 82, 91,
	 83, 91, 92,
	 84, 83, 92,
	 84, 92, 93,
	 85, 84, 93,
	 85, 93, 94,
	 86, 85, 94,
	 86, 94, 95,
	 87, 86, 95,
	 87, 95, 88,
	 80, 87, 88,
	 88, 96, 97,
	 89, 88, 97,
	 89, 97, 98,
	 90, 89, 98,
	 90, 98, 99,
	 91, 90, 99,
	 91, 99, 100,
	 92, 91, 100,
	 92, 100, 101,
	 93, 92, 101,
	 101, 102, 94,
	 93, 101, 94,
	 94, 102, 103,
	 95, 94, 103,
	 95, 103, 96,
	 88, 95, 96,
	 96, 104, 105,
	 97, 96, 105,
	 97, 105, 106,
	 98, 97, 106,
	 98, 106, 107,
	 99, 98, 107,
	 99, 107, 108,
	 100, 99, 108,
	 100, 108, 109,
	 101, 100, 109,
	 101, 109, 110,
	 102, 101, 110,
	 102, 110, 111,
	 103, 102, 111,
	 103, 111, 104,
	 96, 103, 104,
	 104, 112, 113,
	 105, 104, 113,
	 105, 113, 114,
	 106, 105, 114,
	 106, 114, 115,
	 107, 106, 115,
	 107, 115, 116,
	 108, 107, 116,
	 108, 116, 117,
	 109, 108, 117,
	 109, 117, 118,
	 110, 109, 118,
	 110, 118, 119,
	 111, 110, 119,
	 111, 119, 112,
	 104, 111, 112,
	 112, 120, 121,
	 113, 112, 121,
	 113, 121, 122,
	 114, 113, 122,
	 114, 122, 123,
	 115, 114, 123,
	 115, 123, 124,
	 116, 115, 124,
	 116, 124, 125,
	 117, 116, 125,
	 117, 125, 126,
	 118, 117, 126,
	 118, 126, 127,
	 119, 118, 127,
	 119, 127, 120,
	 112, 119, 120,
	 120, 128, 129,
	 121, 120, 129,
	 121, 129, 130,
	 122, 121, 130,
	 122, 130, 131,
	 123, 122, 131,
	 123, 131, 132,
	 124, 123, 132,
	 124, 132, 133,
	 125, 124, 133,
	 125, 133, 134,
	 126, 125, 134,
	 126, 134, 135,
	 127, 126, 135,
	 127, 135, 128,
	 120, 127, 128,
	 128, 136, 137,
	 129, 128, 137,
	 129, 137, 138,
	 130, 129, 138,
	 130, 138, 139,
	 131, 130, 139,
	 131, 139, 140,
	 132, 131, 140,
	 132, 140, 141,
	 133, 132, 141,
	 133, 141, 142,
	 134, 133, 142,
	 134, 142, 143,
	 135, 134, 143,
	 135, 143, 136,
	 128, 135, 136,
	 136, 144, 145,
	 137, 136, 145,
	 137, 145, 146,
	 138, 137, 146,
	 138, 146, 147,
	 139, 138, 147,
	 139, 147, 148,
	 140, 139, 148,
	 140, 148, 149,
	 141, 140, 149,
	 141, 149, 150,
	 142, 141, 150,
	 142, 150, 151,
	 143, 142, 151,
	 143, 151, 144,
	 136, 143, 144,
	 144, 152, 153,
	 145, 144, 153,
	 145, 153, 154,
	 146, 145, 154,
	 146, 154, 155,
	 147, 146, 155,
	 147, 155, 156,
	 148, 147, 156,
	 148, 156, 157,
	 149, 148, 157,
	 149, 157, 158,
	 150, 149, 158,
	 150, 158, 159,
	 151, 150, 159,
	 151, 159, 152,
	 144, 151, 152,
	 152, 160, 161,
	 153, 152, 161,
	 153, 161, 162,
	 154, 153, 162,
	 154, 162, 163,
	 155, 154, 163,
	 155, 163, 164,
	 156, 155, 164,
	 156, 164, 165,
	 157, 156, 165,
	 157, 165, 166,
	 158, 157, 166,
	 158, 166, 167,
	 159, 158, 167,
	 159, 167, 160,
	 152, 159, 160,
	 160, 168, 169,
	 161, 160, 169,
	 161, 169, 170,
	 162, 161, 170,
	 162, 170, 171,
	 163, 162, 171,
	 163, 171, 172,
	 164, 163, 172,
	 164, 172, 173,
	 165, 164, 173,
	 165, 173, 174,
	 166, 165, 174,
	 166, 174, 175,
	 167, 166, 175,
	 167, 175, 168,
	 160, 167, 168,
	 168, 176, 177,
	 169, 168, 177,
	 169, 177, 178,
	 170, 169, 178,
	 170, 178, 179,
	 171, 170, 179,
	 171, 179, 180,
	 172, 171, 180,
	 172, 180, 181,
	 173, 172, 181,
	 173, 181, 182,
	 174, 173, 182,
	 174, 182, 183,
	 175, 174, 183,
	 175, 183, 176,
	 168, 175, 176,
	 176, 184, 185,
	 177, 176, 185,
	 177, 185, 186,
	 178, 177, 186,
	 178, 186, 187,
	 179, 178, 187,
	 179, 187, 188,
	 180, 179, 188,
	 180, 188, 189,
	 181, 180, 189,
	 181, 189, 190,
	 182, 181, 190,
	 182, 190, 191,
	 183, 182, 191,
	 183, 191, 184,
	 176, 183, 184,
	 184, 192, 193,
	 185, 184, 193,
	 185, 193, 194,
	 186, 185, 194,
	 186, 194, 195,
	 187, 186, 195,
	 187, 195, 196,
	 188, 187, 196,
	 188, 196, 197,
	 189, 188, 197,
	 189, 197, 198,
	 190, 189, 198,
	 190, 198, 199,
	 191, 190, 199,
	 191, 199, 192,
	 184, 191, 192,
};
#define _Cable_Thick_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Cable_Thick_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Cable_Thick_materials[1] =
{
	{
		{{ 0.027209f, 0.027209f, 0.027209f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		225.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Black",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Cable_Thick_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Cable_Thick_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Cable_Thick_batches[1][2] =
{
	{ 1152, 0 },
};
#define _Cable_Thick_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Cable_Thick_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Cable_Thick_meshes[1] =
{
	{
		"default",
		1152,
		0,
		0,
	},
};
#define _Cable_Thick_meshes_
#endif
