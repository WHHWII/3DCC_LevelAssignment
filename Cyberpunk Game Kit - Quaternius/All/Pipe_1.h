// "Pipe_1.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Pipe_1.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Pipe_1_version_
const char Pipe_1_version[4] = { '0','1','9','d' };
#define _Pipe_1_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Pipe_1_vertexcount_
const unsigned Pipe_1_vertexcount = 120;
#define _Pipe_1_vertexcount_
#endif
#ifndef _Pipe_1_indexcount_
const unsigned Pipe_1_indexcount = 672;
#define _Pipe_1_indexcount_
#endif
#ifndef _Pipe_1_materialcount_
const unsigned Pipe_1_materialcount = 1; // can be used for batched draws
#define _Pipe_1_materialcount_
#endif
#ifndef _Pipe_1_meshcount_
const unsigned Pipe_1_meshcount = 1;
#define _Pipe_1_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Pipe_1_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Pipe_1_vertices[120] =
{
	{	{ 0.992263f, -0.080847f, -0.052195f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.016300f, -0.688700f, 0.724900f }	},
	{	{ 1.023004f, -0.082165f, -0.050269f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.282300f, -0.762500f, 0.582200f }	},
	{	{ 1.007675f, -0.000000f, -0.031799f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.364400f, -0.000000f, 0.931200f }	},
	{	{ 0.984020f, -0.000000f, -0.029063f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.011000f, -0.000000f, 0.999900f }	},
	{	{ 0.670771f, -0.000000f, -0.023497f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.007400f, -0.000000f, 1.000000f }	},
	{	{ 0.673120f, -0.079166f, -0.049036f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.003000f, -0.699300f, 0.714800f }	},
	{	{ 0.992263f, 0.080848f, -0.052195f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.016300f, 0.688700f, 0.724900f }	},
	{	{ 0.673120f, 0.079166f, -0.049036f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.003000f, 0.699300f, 0.714800f }	},
	{	{ 1.023004f, 0.082165f, -0.050269f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.282300f, 0.762500f, 0.582200f }	},
	{	{ 1.161865f, 0.077079f, -0.101758f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.677900f, 0.654500f, -0.334900f }	},
	{	{ 1.186940f, 0.077563f, -0.002224f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.727000f, 0.677800f, -0.110100f }	},
	{	{ 1.211750f, -0.000000f, -0.006199f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.987700f, -0.000000f, -0.156100f }	},
	{	{ 1.182891f, 0.000000f, -0.112700f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.894700f, 0.000000f, -0.446700f }	},
	{	{ 1.130303f, 0.000000f, -0.179553f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.607200f, 0.000000f, -0.794600f }	},
	{	{ 1.114975f, 0.076918f, -0.161083f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.457600f, 0.648600f, -0.608200f }	},
	{	{ 1.161865f, -0.077078f, -0.101758f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.677900f, -0.654500f, -0.334900f }	},
	{	{ 1.114975f, -0.076918f, -0.161083f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.457600f, -0.648600f, -0.608200f }	},
	{	{ 1.186940f, -0.077562f, -0.002224f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.727000f, -0.677800f, -0.110100f }	},
	{	{ 1.112512f, -0.105225f, 0.009697f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.030200f, -0.999500f, -0.009500f }	},
	{	{ 1.098792f, -0.105777f, -0.068933f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.075000f, -0.996600f, -0.033100f }	},
	{	{ 1.068990f, -0.106055f, -0.105676f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.056000f, -0.995900f, -0.071500f }	},
	{	{ 1.035719f, -0.081586f, -0.036108f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.602300f, -0.754000f, 0.262200f }	},
	{	{ 1.038084f, -0.080275f, 0.021619f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.715800f, -0.698100f, 0.017300f }	},
	{	{ 1.035719f, 0.081587f, -0.036108f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.602300f, 0.754000f, 0.262200f }	},
	{	{ 1.038084f, 0.080275f, 0.021619f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.715800f, 0.698100f, 0.017300f }	},
	{	{ 1.112512f, 0.105225f, 0.009698f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.030200f, 0.999500f, -0.009500f }	},
	{	{ 1.098792f, 0.105777f, -0.068933f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.075000f, 0.996600f, -0.033100f }	},
	{	{ 1.068990f, 0.106055f, -0.105676f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.056000f, 0.995900f, -0.071500f }	},
	{	{ 1.037777f, 0.079390f, 0.154241f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.708200f, 0.706000f, -0.002300f }	},
	{	{ 1.036134f, 0.078718f, 0.324312f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.708300f, 0.705900f, -0.005400f }	},
	{	{ 1.115032f, 0.104958f, 0.324312f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.002200f, 1.000000f, -0.000100f }	},
	{	{ 1.116264f, 0.105008f, 0.151269f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.010800f, 0.999900f, -0.001800f }	},
	{	{ 1.194751f, 0.078121f, 0.148297f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.715400f, 0.698500f, -0.017900f }	},
	{	{ 1.193931f, 0.078718f, 0.324312f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.706900f, 0.707300f, 0.002200f }	},
	{	{ 1.194751f, -0.078122f, 0.148297f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.715400f, -0.698500f, -0.017900f }	},
	{	{ 1.193931f, -0.078720f, 0.324312f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.706900f, -0.707300f, 0.002200f }	},
	{	{ 1.115032f, -0.104959f, 0.324312f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.002200f, -1.000000f, -0.000100f }	},
	{	{ 1.116264f, -0.105009f, 0.151269f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.010800f, -0.999900f, -0.001800f }	},
	{	{ 1.037777f, -0.079391f, 0.154241f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.708200f, -0.706000f, -0.002300f }	},
	{	{ 1.036134f, -0.078720f, 0.324312f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.708300f, -0.705900f, -0.005400f }	},
	{	{ 1.220231f, -0.000000f, 0.324312f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, 0.003700f }	},
	{	{ 1.220914f, -0.000000f, 0.147306f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.999700f, -0.000000f, -0.026400f }	},
	{	{ 1.009834f, -0.000000f, 0.324312f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.009400f }	},
	{	{ 1.011615f, -0.000000f, 0.155232f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.007900f }	},
	{	{ 1.013275f, -0.000000f, 0.025593f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, -0.000000f, 0.002600f }	},
	{	{ 1.016990f, 0.105451f, -0.121588f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.010100f, 0.998800f, -0.047500f }	},
	{	{ 0.680166f, 0.104737f, -0.125653f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.001100f, 1.000000f, -0.009700f }	},
	{	{ 1.041717f, 0.077329f, -0.190982f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.156300f, 0.662100f, -0.733000f }	},
	{	{ 0.687213f, 0.077939f, -0.202270f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.013400f, 0.694200f, -0.719600f }	},
	{	{ 1.049960f, 0.000000f, -0.214112f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.219400f, -0.000000f, -0.975600f }	},
	{	{ 0.689561f, -0.000000f, -0.227809f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.020700f, -0.000000f, -0.999800f }	},
	{	{ 1.041717f, -0.077329f, -0.190981f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.156300f, -0.662100f, -0.732900f }	},
	{	{ 0.687213f, -0.077939f, -0.202270f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.013400f, -0.694200f, -0.719600f }	},
	{	{ 1.016990f, -0.105451f, -0.121588f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.010100f, -0.998800f, -0.047500f }	},
	{	{ 0.680166f, -0.104736f, -0.125653f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.001100f, -1.000000f, -0.009700f }	},
	{	{ 1.014694f, -0.000000f, -0.025166f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.927400f, -0.000000f, 0.374000f }	},
	{	{ -0.000000f, -0.078651f, -0.047944f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.705700f, 0.708500f }	},
	{	{ -0.000000f, -0.000000f, -0.021640f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.000000f, 1.000000f }	},
	{	{ -0.000000f, 0.078651f, -0.047944f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, 0.705700f, 0.708500f }	},
	{	{ -0.000000f, 0.078373f, -0.205768f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, 0.703400f, -0.710800f }	},
	{	{ -0.000000f, -0.000000f, -0.232072f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.000000f, -0.078373f, -0.205768f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.703400f, -0.710800f }	},
	{	{ -0.000000f, -0.104683f, -0.126856f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.004700f }	},
	{	{ -0.000000f, 0.104682f, -0.126856f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, 1.000000f, -0.004700f }	},
	{	{ -0.992263f, 0.080847f, -0.052195f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.016300f, 0.688700f, 0.724900f }	},
	{	{ -1.023004f, 0.082165f, -0.050269f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.282300f, 0.762500f, 0.582200f }	},
	{	{ -1.007675f, 0.000000f, -0.031799f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.364400f, 0.000000f, 0.931200f }	},
	{	{ -0.984020f, 0.000000f, -0.029063f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.011000f, 0.000000f, 0.999900f }	},
	{	{ -0.670771f, 0.000000f, -0.023497f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.007400f, 0.000000f, 1.000000f }	},
	{	{ -0.673120f, 0.079166f, -0.049036f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.003000f, 0.699300f, 0.714800f }	},
	{	{ -0.992263f, -0.080848f, -0.052195f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.016300f, -0.688700f, 0.724900f }	},
	{	{ -0.673120f, -0.079166f, -0.049036f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.003000f, -0.699300f, 0.714800f }	},
	{	{ -1.023004f, -0.082165f, -0.050269f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.282300f, -0.762500f, 0.582200f }	},
	{	{ -1.161866f, -0.077079f, -0.101758f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.677900f, -0.654500f, -0.334900f }	},
	{	{ -1.186941f, -0.077563f, -0.002224f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.727000f, -0.677800f, -0.110100f }	},
	{	{ -1.211750f, 0.000000f, -0.006199f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.987700f, 0.000000f, -0.156100f }	},
	{	{ -1.182891f, -0.000000f, -0.112700f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.894700f, -0.000000f, -0.446700f }	},
	{	{ -1.130304f, -0.000000f, -0.179553f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.607200f, -0.000000f, -0.794600f }	},
	{	{ -1.114975f, -0.076918f, -0.161083f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.457600f, -0.648600f, -0.608200f }	},
	{	{ -1.161866f, 0.077078f, -0.101758f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.677900f, 0.654500f, -0.334900f }	},
	{	{ -1.114975f, 0.076918f, -0.161083f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.457600f, 0.648600f, -0.608200f }	},
	{	{ -1.186941f, 0.077562f, -0.002224f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.727000f, 0.677800f, -0.110100f }	},
	{	{ -1.112512f, 0.105225f, 0.009697f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.030200f, 0.999500f, -0.009500f }	},
	{	{ -1.098793f, 0.105777f, -0.068933f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.075000f, 0.996600f, -0.033100f }	},
	{	{ -1.068990f, 0.106055f, -0.105676f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.056000f, 0.995900f, -0.071500f }	},
	{	{ -1.035719f, 0.081586f, -0.036108f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.602300f, 0.754000f, 0.262200f }	},
	{	{ -1.038084f, 0.080275f, 0.021619f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.715800f, 0.698100f, 0.017300f }	},
	{	{ -1.035719f, -0.081587f, -0.036108f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.602300f, -0.754000f, 0.262200f }	},
	{	{ -1.038084f, -0.080275f, 0.021619f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.715800f, -0.698100f, 0.017300f }	},
	{	{ -1.112512f, -0.105225f, 0.009698f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.030200f, -0.999500f, -0.009500f }	},
	{	{ -1.098793f, -0.105777f, -0.068933f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.075000f, -0.996600f, -0.033100f }	},
	{	{ -1.068990f, -0.106055f, -0.105676f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.056000f, -0.995900f, -0.071500f }	},
	{	{ -1.037777f, -0.079390f, 0.154241f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.708200f, -0.706000f, -0.002300f }	},
	{	{ -1.036134f, -0.078718f, 0.324312f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.708300f, -0.705900f, -0.005400f }	},
	{	{ -1.115032f, -0.104958f, 0.324312f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.002200f, -1.000000f, -0.000100f }	},
	{	{ -1.116264f, -0.105008f, 0.151269f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.010800f, -0.999900f, -0.001800f }	},
	{	{ -1.194752f, -0.078121f, 0.148297f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.715400f, -0.698500f, -0.017900f }	},
	{	{ -1.193931f, -0.078718f, 0.324312f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.706900f, -0.707300f, 0.002200f }	},
	{	{ -1.194752f, 0.078122f, 0.148297f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.715400f, 0.698500f, -0.017900f }	},
	{	{ -1.193931f, 0.078720f, 0.324312f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.706900f, 0.707300f, 0.002200f }	},
	{	{ -1.115032f, 0.104959f, 0.324312f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.002200f, 1.000000f, -0.000100f }	},
	{	{ -1.116264f, 0.105009f, 0.151269f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.010800f, 0.999900f, -0.001800f }	},
	{	{ -1.037777f, 0.079391f, 0.154241f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.708200f, 0.706000f, -0.002300f }	},
	{	{ -1.036134f, 0.078720f, 0.324312f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.708300f, 0.705900f, -0.005400f }	},
	{	{ -1.220231f, 0.000000f, 0.324312f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, -0.000000f, 0.003700f }	},
	{	{ -1.220914f, 0.000000f, 0.147306f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.999700f, 0.000000f, -0.026400f }	},
	{	{ -1.009834f, 0.000000f, 0.324312f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, -0.000000f, -0.009400f }	},
	{	{ -1.011615f, 0.000000f, 0.155232f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.007900f }	},
	{	{ -1.013275f, 0.000000f, 0.025593f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, 0.002600f }	},
	{	{ -1.016990f, -0.105451f, -0.121588f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.010100f, -0.998800f, -0.047500f }	},
	{	{ -0.680166f, -0.104737f, -0.125653f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.001100f, -1.000000f, -0.009700f }	},
	{	{ -1.041717f, -0.077329f, -0.190982f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.156300f, -0.662100f, -0.733000f }	},
	{	{ -0.687213f, -0.077939f, -0.202270f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.013400f, -0.694200f, -0.719600f }	},
	{	{ -1.049960f, -0.000001f, -0.214112f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.219400f, 0.000000f, -0.975600f }	},
	{	{ -0.689561f, 0.000000f, -0.227809f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.020700f, 0.000000f, -0.999800f }	},
	{	{ -1.041717f, 0.077329f, -0.190981f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.156300f, 0.662100f, -0.732900f }	},
	{	{ -0.687213f, 0.077939f, -0.202270f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.013400f, 0.694200f, -0.719600f }	},
	{	{ -1.016990f, 0.105451f, -0.121588f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.010100f, 0.998800f, -0.047500f }	},
	{	{ -0.680166f, 0.104736f, -0.125653f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.001100f, 1.000000f, -0.009700f }	},
	{	{ -1.014694f, 0.000000f, -0.025166f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.927400f, 0.000000f, 0.374000f }	},
};
#define _Pipe_1_vertices_
#endif
#ifndef _Pipe_1_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Pipe_1_indices[672] =
{
	 0, 1, 2,
	 3, 0, 2,
	 4, 5, 0,
	 3, 4, 0,
	 6, 7, 4,
	 3, 6, 4,
	 2, 8, 6,
	 3, 2, 6,
	 9, 10, 11,
	 12, 9, 11,
	 13, 14, 9,
	 12, 13, 9,
	 15, 16, 13,
	 12, 15, 13,
	 11, 17, 15,
	 12, 11, 15,
	 15, 17, 18,
	 19, 15, 18,
	 20, 16, 15,
	 19, 20, 15,
	 21, 1, 20,
	 19, 21, 20,
	 18, 22, 21,
	 19, 18, 21,
	 23, 24, 25,
	 26, 23, 25,
	 27, 8, 23,
	 26, 27, 23,
	 9, 14, 27,
	 26, 9, 27,
	 25, 10, 9,
	 26, 25, 9,
	 28, 29, 30,
	 31, 28, 30,
	 25, 24, 28,
	 31, 25, 28,
	 32, 10, 25,
	 31, 32, 25,
	 30, 33, 32,
	 31, 30, 32,
	 34, 35, 36,
	 37, 34, 36,
	 18, 17, 34,
	 37, 18, 34,
	 38, 22, 18,
	 37, 38, 18,
	 36, 39, 38,
	 37, 36, 38,
	 32, 33, 40,
	 41, 32, 40,
	 11, 10, 32,
	 41, 11, 32,
	 34, 17, 11,
	 41, 34, 11,
	 40, 35, 34,
	 41, 40, 34,
	 38, 39, 42,
	 43, 38, 42,
	 44, 22, 38,
	 43, 44, 38,
	 28, 24, 44,
	 43, 28, 44,
	 42, 29, 28,
	 43, 42, 28,
	 6, 8, 27,
	 45, 6, 27,
	 46, 7, 6,
	 45, 46, 6,
	 47, 48, 46,
	 45, 47, 46,
	 27, 14, 47,
	 45, 27, 47,
	 47, 14, 13,
	 49, 47, 13,
	 50, 48, 47,
	 49, 50, 47,
	 51, 52, 50,
	 49, 51, 50,
	 13, 16, 51,
	 49, 13, 51,
	 51, 16, 20,
	 53, 51, 20,
	 54, 52, 51,
	 53, 54, 51,
	 0, 5, 54,
	 53, 0, 54,
	 20, 1, 0,
	 53, 20, 0,
	 21, 22, 44,
	 55, 21, 44,
	 2, 1, 21,
	 55, 2, 21,
	 23, 8, 2,
	 55, 23, 2,
	 44, 24, 23,
	 55, 44, 23,
	 56, 5, 4,
	 57, 56, 4,
	 4, 7, 58,
	 57, 4, 58,
	 59, 48, 50,
	 60, 59, 50,
	 50, 52, 61,
	 60, 50, 61,
	 61, 52, 54,
	 62, 61, 54,
	 54, 5, 56,
	 62, 54, 56,
	 58, 7, 46,
	 63, 58, 46,
	 46, 48, 59,
	 63, 46, 59,
	 64, 65, 66,
	 67, 64, 66,
	 68, 69, 64,
	 67, 68, 64,
	 70, 71, 68,
	 67, 70, 68,
	 66, 72, 70,
	 67, 66, 70,
	 73, 74, 75,
	 76, 73, 75,
	 77, 78, 73,
	 76, 77, 73,
	 79, 80, 77,
	 76, 79, 77,
	 75, 81, 79,
	 76, 75, 79,
	 79, 81, 82,
	 83, 79, 82,
	 84, 80, 79,
	 83, 84, 79,
	 85, 65, 84,
	 83, 85, 84,
	 82, 86, 85,
	 83, 82, 85,
	 87, 88, 89,
	 90, 87, 89,
	 91, 72, 87,
	 90, 91, 87,
	 73, 78, 91,
	 90, 73, 91,
	 89, 74, 73,
	 90, 89, 73,
	 92, 93, 94,
	 95, 92, 94,
	 89, 88, 92,
	 95, 89, 92,
	 96, 74, 89,
	 95, 96, 89,
	 94, 97, 96,
	 95, 94, 96,
	 98, 99, 100,
	 101, 98, 100,
	 82, 81, 98,
	 101, 82, 98,
	 102, 86, 82,
	 101, 102, 82,
	 100, 103, 102,
	 101, 100, 102,
	 96, 97, 104,
	 105, 96, 104,
	 75, 74, 96,
	 105, 75, 96,
	 98, 81, 75,
	 105, 98, 75,
	 104, 99, 98,
	 105, 104, 98,
	 102, 103, 106,
	 107, 102, 106,
	 108, 86, 102,
	 107, 108, 102,
	 92, 88, 108,
	 107, 92, 108,
	 106, 93, 92,
	 107, 106, 92,
	 70, 72, 91,
	 109, 70, 91,
	 110, 71, 70,
	 109, 110, 70,
	 111, 112, 110,
	 109, 111, 110,
	 91, 78, 111,
	 109, 91, 111,
	 111, 78, 77,
	 113, 111, 77,
	 114, 112, 111,
	 113, 114, 111,
	 115, 116, 114,
	 113, 115, 114,
	 77, 80, 115,
	 113, 77, 115,
	 115, 80, 84,
	 117, 115, 84,
	 118, 116, 115,
	 117, 118, 115,
	 64, 69, 118,
	 117, 64, 118,
	 84, 65, 64,
	 117, 84, 64,
	 85, 86, 108,
	 119, 85, 108,
	 66, 65, 85,
	 119, 66, 85,
	 87, 72, 66,
	 119, 87, 66,
	 108, 88, 87,
	 119, 108, 87,
	 58, 69, 68,
	 57, 58, 68,
	 68, 71, 56,
	 57, 68, 56,
	 61, 112, 114,
	 60, 61, 114,
	 114, 116, 59,
	 60, 114, 59,
	 59, 116, 118,
	 63, 59, 118,
	 118, 69, 58,
	 63, 118, 58,
	 56, 71, 110,
	 62, 56, 110,
	 110, 112, 61,
	 62, 110, 61,
};
#define _Pipe_1_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Pipe_1_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Pipe_1_materials[1] =
{
	{
		{{ 0.310810f, 0.136332f, 0.035217f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		225.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Orange",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Pipe_1_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Pipe_1_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Pipe_1_batches[1][2] =
{
	{ 672, 0 },
};
#define _Pipe_1_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Pipe_1_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Pipe_1_meshes[1] =
{
	{
		"default",
		672,
		0,
		0,
	},
};
#define _Pipe_1_meshes_
#endif
