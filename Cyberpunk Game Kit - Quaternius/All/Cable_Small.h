// "Cable_Small.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Cable_Small.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Cable_Small_version_
const char Cable_Small_version[4] = { '0','1','9','d' };
#define _Cable_Small_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Cable_Small_vertexcount_
const unsigned Cable_Small_vertexcount = 200;
#define _Cable_Small_vertexcount_
#endif
#ifndef _Cable_Small_indexcount_
const unsigned Cable_Small_indexcount = 1152;
#define _Cable_Small_indexcount_
#endif
#ifndef _Cable_Small_materialcount_
const unsigned Cable_Small_materialcount = 1; // can be used for batched draws
#define _Cable_Small_materialcount_
#endif
#ifndef _Cable_Small_meshcount_
const unsigned Cable_Small_meshcount = 1;
#define _Cable_Small_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Cable_Small_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Cable_Small_vertices[200] =
{
	{	{ -0.081299f, 0.003135f, -0.032877f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.704200f, -0.004500f, 0.710000f }	},
	{	{ -0.079682f, -0.116465f, -0.032040f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.708300f, -0.004600f, 0.705800f }	},
	{	{ -0.068127f, -0.115651f, -0.027243f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.001800f, 0.010000f, 0.999900f }	},
	{	{ -0.069739f, 0.003605f, -0.028077f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.004400f, 0.007000f, 0.999900f }	},
	{	{ -0.056562f, -0.115162f, -0.032028f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.706300f, 0.018800f, 0.707600f }	},
	{	{ -0.058172f, 0.003954f, -0.032862f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.708400f, 0.014500f, 0.705600f }	},
	{	{ -0.051760f, -0.115285f, -0.043589f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.999800f, 0.016600f, -0.000200f }	},
	{	{ -0.053372f, 0.003976f, -0.044424f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.999900f, 0.013500f, 0.002000f }	},
	{	{ -0.056537f, -0.115948f, -0.055155f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.706800f, 0.004700f, -0.707400f }	},
	{	{ -0.058154f, 0.003660f, -0.055993f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.710900f, 0.004700f, -0.703200f }	},
	{	{ -0.068092f, -0.116762f, -0.059952f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000200f, -0.010000f, -0.999900f }	},
	{	{ -0.069713f, 0.003189f, -0.060792f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.006200f, -0.006900f, -0.999900f }	},
	{	{ -0.079657f, -0.117250f, -0.055167f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.706300f, -0.018900f, -0.707600f }	},
	{	{ -0.081281f, 0.002841f, -0.056008f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.704500f, -0.014500f, -0.709600f }	},
	{	{ -0.084460f, -0.117127f, -0.043606f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.999800f, -0.016700f, -0.001300f }	},
	{	{ -0.086081f, 0.002818f, -0.044445f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.999900f, -0.013500f, 0.000700f }	},
	{	{ -0.077378f, -0.232708f, -0.030512f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.708300f, -0.005100f, 0.705800f }	},
	{	{ -0.065830f, -0.231543f, -0.025719f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.002200f, 0.016000f, 0.999800f }	},
	{	{ -0.054268f, -0.230895f, -0.030507f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.706000f, 0.027600f, 0.707600f }	},
	{	{ -0.049463f, -0.231143f, -0.042066f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.999700f, 0.023200f, -0.000300f }	},
	{	{ -0.054233f, -0.232144f, -0.053628f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.706800f, 0.005100f, -0.707400f }	},
	{	{ -0.065782f, -0.233309f, -0.058421f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000500f, -0.016000f, -0.999800f }	},
	{	{ -0.077344f, -0.233957f, -0.053633f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.706100f, -0.027800f, -0.707500f }	},
	{	{ -0.082148f, -0.233709f, -0.042074f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.999700f, -0.023300f, -0.001000f }	},
	{	{ -0.074407f, -0.344284f, -0.028402f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.708300f, -0.006100f, 0.705900f }	},
	{	{ -0.062869f, -0.342747f, -0.023617f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.002700f, 0.021600f, 0.999800f }	},
	{	{ -0.051312f, -0.341910f, -0.028407f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.705600f, 0.036700f, 0.707600f }	},
	{	{ -0.046504f, -0.342262f, -0.039965f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.999500f, 0.030400f, -0.000700f }	},
	{	{ -0.051266f, -0.343599f, -0.051521f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.706700f, 0.006300f, -0.707500f }	},
	{	{ -0.062804f, -0.345136f, -0.056306f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000800f, -0.021600f, -0.999800f }	},
	{	{ -0.074361f, -0.345973f, -0.051515f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.705900f, -0.036900f, -0.707300f }	},
	{	{ -0.079168f, -0.345620f, -0.039958f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.999500f, -0.030500f, -0.000600f }	},
	{	{ -0.070791f, -0.449881f, -0.025819f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.708200f, -0.008000f, 0.705900f }	},
	{	{ -0.059267f, -0.447935f, -0.021043f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.003300f, 0.027100f, 0.999600f }	},
	{	{ -0.047718f, -0.446867f, -0.025840f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.705200f, 0.046400f, 0.707500f }	},
	{	{ -0.042907f, -0.447301f, -0.037396f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.999200f, 0.038500f, -0.001200f }	},
	{	{ -0.047657f, -0.448984f, -0.048943f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.706400f, 0.008200f, -0.707700f }	},
	{	{ -0.059181f, -0.450929f, -0.053718f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.001200f, -0.027100f, -0.999600f }	},
	{	{ -0.070730f, -0.451998f, -0.048921f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.705600f, -0.046700f, -0.707100f }	},
	{	{ -0.075540f, -0.451564f, -0.037366f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.999200f, -0.038700f, -0.000100f }	},
	{	{ -0.066550f, -0.548191f, -0.022870f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.708000f, -0.011000f, 0.706100f }	},
	{	{ -0.055047f, -0.545775f, -0.018109f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.004200f, 0.032700f, 0.999500f }	},
	{	{ -0.043510f, -0.544415f, -0.022914f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.704500f, 0.057300f, 0.707400f }	},
	{	{ -0.038697f, -0.544908f, -0.034468f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.998800f, 0.048300f, -0.002000f }	},
	{	{ -0.043430f, -0.546966f, -0.046004f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.706000f, 0.011200f, -0.708100f }	},
	{	{ -0.054934f, -0.549382f, -0.050765f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.001600f, -0.032700f, -0.999500f }	},
	{	{ -0.066470f, -0.550741f, -0.045960f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.705100f, -0.057600f, -0.706700f }	},
	{	{ -0.071283f, -0.550248f, -0.034406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.998800f, -0.048600f, 0.000700f }	},
	{	{ -0.061703f, -0.637919f, -0.019664f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.707600f, -0.015400f, 0.706400f }	},
	{	{ -0.050231f, -0.634931f, -0.014923f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.005400f, 0.038700f, 0.999200f }	},
	{	{ -0.038716f, -0.633190f, -0.019742f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.703500f, 0.070100f, 0.707300f }	},
	{	{ -0.033901f, -0.633715f, -0.031295f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.998100f, 0.060600f, -0.003300f }	},
	{	{ -0.038611f, -0.636199f, -0.042815f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.705100f, 0.015700f, -0.708900f }	},
	{	{ -0.050083f, -0.639187f, -0.047556f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.002000f, -0.038500f, -0.999200f }	},
	{	{ -0.061599f, -0.640928f, -0.042737f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.704300f, -0.070700f, -0.706300f }	},
	{	{ -0.066413f, -0.640403f, -0.031185f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.998100f, -0.061000f, 0.001800f }	},
	{	{ -0.056268f, -0.717788f, -0.016306f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.706900f, -0.022200f, 0.706900f }	},
	{	{ -0.044847f, -0.714060f, -0.011597f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.007300f, 0.045500f, 0.998900f }	},
	{	{ -0.033368f, -0.711794f, -0.016438f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.701700f, 0.086500f, 0.707100f }	},
	{	{ -0.028553f, -0.712316f, -0.027991f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.997000f, 0.076900f, -0.005300f }	},
	{	{ -0.033227f, -0.715322f, -0.039489f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.703500f, 0.022600f, -0.710300f }	},
	{	{ -0.044648f, -0.719050f, -0.044199f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.002500f, -0.045200f, -0.999000f }	},
	{	{ -0.056127f, -0.721316f, -0.039358f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.703100f, -0.087400f, -0.705700f }	},
	{	{ -0.060941f, -0.720794f, -0.027805f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.996900f, -0.077700f, 0.003700f }	},
	{	{ -0.050250f, -0.786563f, -0.012899f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.705400f, -0.032800f, 0.708000f }	},
	{	{ -0.038923f, -0.781797f, -0.008242f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.010400f, 0.054000f, 0.998500f }	},
	{	{ -0.027513f, -0.778758f, -0.013122f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.698700f, 0.109100f, 0.707000f }	},
	{	{ -0.022703f, -0.779225f, -0.024677f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.994900f, 0.100400f, -0.008800f }	},
	{	{ -0.027314f, -0.782926f, -0.036141f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.700400f, 0.033400f, -0.712900f }	},
	{	{ -0.038642f, -0.787692f, -0.040799f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.003100f, -0.053400f, -0.998600f }	},
	{	{ -0.050052f, -0.790731f, -0.035919f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.700800f, -0.110800f, -0.704700f }	},
	{	{ -0.054861f, -0.790264f, -0.024363f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.994800f, -0.102000f, 0.006800f }	},
	{	{ -0.043631f, -0.843116f, -0.009535f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.702000f, -0.051000f, 0.710300f }	},
	{	{ -0.032501f, -0.836730f, -0.004976f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.016600f, 0.066100f, 0.997700f }	},
	{	{ -0.021244f, -0.832440f, -0.009932f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.692100f, 0.144200f, 0.707200f }	},
	{	{ -0.016453f, -0.832758f, -0.021497f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.990300f, 0.137900f, -0.015500f }	},
	{	{ -0.020937f, -0.837501f, -0.032897f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.693500f, 0.051700f, -0.718500f }	},
	{	{ -0.032066f, -0.843887f, -0.037456f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.003700f, -0.065000f, -0.997900f }	},
	{	{ -0.043324f, -0.848177f, -0.032500f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.695600f, -0.148400f, -0.702900f }	},
	{	{ -0.048115f, -0.847859f, -0.020936f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.989700f, -0.142400f, 0.012800f }	},
	{	{ -0.036275f, -0.886637f, -0.006264f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.692600f, -0.088900f, 0.715800f }	},
	{	{ -0.025684f, -0.877294f, -0.001937f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.031500f, 0.086100f, 0.995800f }	},
	{	{ -0.014853f, -0.870665f, -0.007077f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.676700f, 0.204700f, 0.707200f }	},
	{	{ -0.010126f, -0.870631f, -0.018669f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.978700f, 0.203100f, -0.029100f }	},
	{	{ -0.014274f, -0.877215f, -0.029925f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.676900f, 0.085700f, -0.731000f }	},
	{	{ -0.024866f, -0.886558f, -0.034252f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.004300f, -0.085700f, -0.996300f }	},
	{	{ -0.035696f, -0.893187f, -0.029112f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.679200f, -0.225900f, -0.698300f }	},
	{	{ -0.040423f, -0.893221f, -0.017520f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.973100f, -0.228500f, 0.028400f }	},
	{	{ -0.027323f, -0.917257f, -0.002914f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.643100f, -0.187700f, 0.742400f }	},
	{	{ -0.018918f, -0.901495f, 0.000630f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.086300f, 0.118500f, 0.989200f }	},
	{	{ -0.009845f, -0.889707f, -0.005138f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.658100f, 0.240100f, 0.713600f }	},
	{	{ -0.005417f, -0.888795f, -0.016838f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.968800f, 0.246300f, -0.025100f }	},
	{	{ -0.008230f, -0.899298f, -0.027615f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.595200f, 0.162400f, -0.787000f }	},
	{	{ -0.016635f, -0.915060f, -0.031160f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.007900f, -0.142600f, -0.989700f }	},
	{	{ -0.025708f, -0.926848f, -0.025392f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.573300f, -0.450100f, -0.684700f }	},
	{	{ -0.030136f, -0.927760f, -0.013692f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.870400f, -0.483200f, 0.094400f }	},
	{	{ -0.015749f, -0.930875f, 0.000711f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.424900f, -0.349200f, 0.835200f }	},
	{	{ -0.013695f, -0.908330f, 0.002150f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.303500f, 0.098100f, 0.947800f }	},
	{	{ -0.009366f, -0.891475f, -0.005192f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.152700f, 0.487300f, 0.859700f }	},
	{	{ -0.005298f, -0.890179f, -0.017010f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.354300f, 0.578800f, -0.734500f }	},
	{	{ -0.003874f, -0.905208f, -0.026383f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.339700f, 0.169600f, -0.925100f }	},
	{	{ -0.005927f, -0.927753f, -0.027822f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.200500f, -0.274400f, -0.940500f }	},
	{	{ -0.010256f, -0.944608f, -0.020480f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.063800f, -0.826200f, -0.559700f }	},
	{	{ -0.014325f, -0.945904f, -0.008662f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.358700f, -0.889900f, 0.281800f }	},
	{	{ -0.004572f, -0.927347f, 0.004735f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.146500f, -0.301900f, 0.942000f }	},
	{	{ -0.009208f, -0.906062f, 0.003671f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.506700f, 0.155400f, 0.848000f }	},
	{	{ -0.009263f, -0.890032f, -0.005311f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.900100f, 0.418200f, 0.122000f }	},
	{	{ -0.004706f, -0.888644f, -0.016947f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.539100f, 0.499900f, -0.677800f }	},
	{	{ 0.001794f, -0.902717f, -0.024420f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.194100f, 0.229400f, -0.953800f }	},
	{	{ 0.006431f, -0.924003f, -0.023356f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.525200f, -0.219100f, -0.822300f }	},
	{	{ 0.006486f, -0.940032f, -0.014374f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.614400f, -0.721900f, -0.318100f }	},
	{	{ 0.001929f, -0.941420f, -0.002738f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.304900f, -0.791300f, 0.529900f }	},
	{	{ 0.005169f, -0.914140f, 0.009588f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.088700f, -0.228200f, 0.969500f }	},
	{	{ -0.002768f, -0.897017f, 0.006952f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.617600f, 0.111400f, 0.778600f }	},
	{	{ -0.004769f, -0.883441f, -0.002956f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.895400f, 0.420400f, 0.146800f }	},
	{	{ 0.000336f, -0.881362f, -0.014331f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.559100f, 0.481000f, -0.675200f }	},
	{	{ 0.009559f, -0.892003f, -0.020508f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.151600f, 0.217400f, -0.964200f }	},
	{	{ 0.017496f, -0.909126f, -0.017873f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.657000f, -0.125200f, -0.743400f }	},
	{	{ 0.019497f, -0.922702f, -0.007964f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.876600f, -0.457600f, -0.148900f }	},
	{	{ 0.014392f, -0.924781f, 0.003411f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.555200f, -0.524200f, 0.645600f }	},
	{	{ 0.014745f, -0.890287f, 0.015449f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.063500f, -0.182600f, 0.981100f }	},
	{	{ 0.005142f, -0.877110f, 0.011826f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.674900f, 0.070500f, 0.734500f }	},
	{	{ 0.002048f, -0.866125f, 0.001269f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.954300f, 0.290900f, 0.069000f }	},
	{	{ 0.007272f, -0.863764f, -0.010035f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.630700f, 0.344300f, -0.695400f }	},
	{	{ 0.017756f, -0.871415f, -0.015465f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.096800f, 0.182200f, -0.978500f }	},
	{	{ 0.027359f, -0.884592f, -0.011842f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.699900f, -0.070800f, -0.710700f }	},
	{	{ 0.030453f, -0.895578f, -0.001285f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.950200f, -0.304800f, -0.064600f }	},
	{	{ 0.025229f, -0.897938f, 0.010019f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.632100f, -0.364400f, 0.683900f }	},
	{	{ 0.024002f, -0.854896f, 0.021949f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.047700f, -0.147400f, 0.987900f }	},
	{	{ 0.013564f, -0.844801f, 0.017752f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.699300f, 0.042900f, 0.713500f }	},
	{	{ 0.009869f, -0.836031f, 0.006783f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.977400f, 0.209100f, 0.030100f }	},
	{	{ 0.015079f, -0.833723f, -0.004531f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.660300f, 0.255700f, -0.706100f }	},
	{	{ 0.026144f, -0.839231f, -0.009561f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.066900f, 0.147900f, -0.986700f }	},
	{	{ 0.036582f, -0.849326f, -0.005365f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.715100f, -0.041000f, -0.697800f }	},
	{	{ 0.040277f, -0.858096f, 0.005604f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.976300f, -0.215100f, -0.024100f }	},
	{	{ 0.035068f, -0.860404f, 0.016918f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.662100f, -0.266100f, 0.700600f }	},
	{	{ 0.032838f, -0.806781f, 0.028789f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.037300f, -0.118300f, 0.992200f }	},
	{	{ 0.021955f, -0.799042f, 0.024254f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.710200f, 0.025900f, 0.703500f }	},
	{	{ 0.017916f, -0.792099f, 0.013023f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.988000f, 0.154000f, 0.008900f }	},
	{	{ 0.023083f, -0.790017f, 0.001676f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.674600f, 0.193700f, -0.712300f }	},
	{	{ 0.034432f, -0.794020f, -0.003138f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.049600f, 0.118500f, -0.991700f }	},
	{	{ 0.045315f, -0.801759f, 0.001397f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.721000f, -0.024000f, -0.692500f }	},
	{	{ 0.049354f, -0.808702f, 0.012628f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.987600f, -0.156900f, -0.003100f }	},
	{	{ 0.044188f, -0.810784f, 0.023975f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.676000f, -0.199600f, 0.709400f }	},
	{	{ 0.041118f, -0.744649f, 0.035676f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.030400f, -0.093600f, 0.995100f }	},
	{	{ 0.029985f, -0.738745f, 0.030935f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.715400f, 0.015500f, 0.698500f }	},
	{	{ 0.025739f, -0.733315f, 0.019534f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.993400f, 0.114300f, -0.003100f }	},
	{	{ 0.030865f, -0.731540f, 0.008153f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.682200f, 0.147200f, -0.716200f }	},
	{	{ 0.042362f, -0.734460f, 0.003460f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.039100f, 0.093600f, -0.994800f }	},
	{	{ 0.053494f, -0.740364f, 0.008201f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.723200f, -0.014000f, -0.690500f }	},
	{	{ 0.057740f, -0.745794f, 0.019602f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.993200f, -0.115800f, 0.008500f }	},
	{	{ 0.052615f, -0.747570f, 0.030983f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.683100f, -0.150700f, 0.714600f }	},
	{	{ 0.048681f, -0.667177f, 0.042307f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.025900f, -0.072300f, 0.997000f }	},
	{	{ 0.037402f, -0.662739f, 0.037439f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.717900f, 0.009200f, 0.696100f }	},
	{	{ 0.033030f, -0.658581f, 0.025929f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.996400f, 0.084400f, -0.010300f }	},
	{	{ 0.038122f, -0.657139f, 0.014519f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.686500f, 0.110600f, -0.718600f }	},
	{	{ 0.049699f, -0.659258f, 0.009895f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.032500f, 0.072200f, -0.996900f }	},
	{	{ 0.060977f, -0.663697f, 0.014762f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.723900f, -0.008200f, -0.689900f }	},
	{	{ 0.065349f, -0.667855f, 0.026273f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.996200f, -0.085200f, 0.015100f }	},
	{	{ 0.060257f, -0.669297f, 0.037683f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.687100f, -0.112700f, 0.717700f }	},
	{	{ 0.055352f, -0.573037f, 0.048376f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.023000f, -0.053800f, 0.998300f }	},
	{	{ 0.043987f, -0.569796f, 0.043431f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.719200f, 0.005500f, 0.694800f }	},
	{	{ 0.039536f, -0.566722f, 0.031849f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.998000f, 0.060900f, -0.014700f }	},
	{	{ 0.044604f, -0.565617f, 0.020418f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.689000f, 0.080800f, -0.720200f }	},
	{	{ 0.056224f, -0.567128f, 0.015833f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.028200f, 0.053700f, -0.998100f }	},
	{	{ 0.067589f, -0.570369f, 0.020779f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.724000f, -0.004900f, -0.689800f }	},
	{	{ 0.072040f, -0.573443f, 0.032360f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.997900f, -0.061400f, 0.018900f }	},
	{	{ 0.066972f, -0.574548f, 0.043792f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.689400f, -0.082100f, 0.719700f }	},
	{	{ 0.060946f, -0.460903f, 0.053573f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.021300f, -0.037400f, 0.999100f }	},
	{	{ 0.049531f, -0.458658f, 0.048581f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.719800f, 0.003500f, 0.694100f }	},
	{	{ 0.045032f, -0.456521f, 0.036956f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.999000f, 0.042000f, -0.017300f }	},
	{	{ 0.050084f, -0.455742f, 0.025509f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.690500f, 0.055900f, -0.721200f }	},
	{	{ 0.061728f, -0.456778f, 0.020946f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.025500f, 0.037400f, -0.999000f }	},
	{	{ 0.073144f, -0.459023f, 0.025938f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.723800f, -0.003100f, -0.690000f }	},
	{	{ 0.077642f, -0.461160f, 0.037564f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.998900f, -0.042200f, 0.021000f }	},
	{	{ 0.072591f, -0.461939f, 0.049011f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.690700f, -0.056700f, 0.720900f }	},
	{	{ 0.065277f, -0.329450f, 0.057584f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.020300f, -0.022900f, 0.999500f }	},
	{	{ 0.053833f, -0.328049f, 0.052566f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.720200f, 0.002500f, 0.693700f }	},
	{	{ 0.049307f, -0.326728f, 0.040915f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.999500f, 0.026300f, -0.018800f }	},
	{	{ 0.054348f, -0.326260f, 0.029459f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.691400f, 0.034700f, -0.721600f }	},
	{	{ 0.066005f, -0.326919f, 0.024908f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.023800f, 0.022900f, -0.999500f }	},
	{	{ 0.077449f, -0.328319f, 0.029926f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.723600f, -0.002300f, -0.690200f }	},
	{	{ 0.081975f, -0.329641f, 0.041577f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.999400f, -0.026400f, 0.022100f }	},
	{	{ 0.076934f, -0.330109f, 0.053033f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.691400f, -0.035100f, 0.721600f }	},
	{	{ 0.068152f, -0.177356f, 0.060094f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.019900f, -0.009900f, 0.999700f }	},
	{	{ 0.056693f, -0.176680f, 0.055064f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.720400f, 0.002300f, 0.693500f }	},
	{	{ 0.052154f, -0.176078f, 0.043401f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.999700f, 0.013100f, -0.019500f }	},
	{	{ 0.057189f, -0.175902f, 0.031940f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.691800f, 0.016300f, -0.721900f }	},
	{	{ 0.068852f, -0.176256f, 0.027395f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.022800f, 0.009900f, -0.999700f }	},
	{	{ 0.080310f, -0.176932f, 0.032425f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.723300f, -0.002200f, -0.690500f }	},
	{	{ 0.084850f, -0.177534f, 0.044087f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.999600f, -0.013200f, 0.022500f }	},
	{	{ 0.079815f, -0.177710f, 0.055549f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.691800f, -0.016400f, 0.721900f }	},
	{	{ 0.069378f, -0.003300f, 0.060787f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.020900f, -0.003800f, 0.999800f }	},
	{	{ 0.057915f, -0.003259f, 0.055754f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.720600f, 0.002300f, 0.693400f }	},
	{	{ 0.053370f, -0.003299f, 0.044089f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.999800f, 0.007100f, -0.018800f }	},
	{	{ 0.058403f, -0.003397f, 0.032626f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.693000f, 0.007700f, -0.720800f }	},
	{	{ 0.070069f, -0.003496f, 0.028082f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.021400f, 0.003800f, -0.999800f }	},
	{	{ 0.081531f, -0.003536f, 0.033115f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.723200f, -0.002300f, -0.690600f }	},
	{	{ 0.086076f, -0.003496f, 0.044780f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.999700f, -0.007100f, 0.023500f }	},
	{	{ 0.081043f, -0.003398f, 0.056243f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.690800f, -0.007700f, 0.722900f }	},
};
#define _Cable_Small_vertices_
#endif
#ifndef _Cable_Small_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Cable_Small_indices[1152] =
{
	 0, 1, 2,
	 3, 0, 2,
	 3, 2, 4,
	 5, 3, 4,
	 5, 4, 6,
	 7, 5, 6,
	 7, 6, 8,
	 9, 7, 8,
	 9, 8, 10,
	 11, 9, 10,
	 11, 10, 12,
	 13, 11, 12,
	 13, 12, 14,
	 15, 13, 14,
	 15, 14, 1,
	 0, 15, 1,
	 1, 16, 17,
	 2, 1, 17,
	 2, 17, 18,
	 4, 2, 18,
	 4, 18, 19,
	 6, 4, 19,
	 6, 19, 20,
	 8, 6, 20,
	 8, 20, 21,
	 10, 8, 21,
	 10, 21, 22,
	 12, 10, 22,
	 12, 22, 23,
	 14, 12, 23,
	 14, 23, 16,
	 1, 14, 16,
	 16, 24, 25,
	 17, 16, 25,
	 17, 25, 26,
	 18, 17, 26,
	 18, 26, 27,
	 19, 18, 27,
	 19, 27, 28,
	 20, 19, 28,
	 20, 28, 29,
	 21, 20, 29,
	 21, 29, 30,
	 22, 21, 30,
	 22, 30, 31,
	 23, 22, 31,
	 23, 31, 24,
	 16, 23, 24,
	 24, 32, 33,
	 25, 24, 33,
	 25, 33, 34,
	 26, 25, 34,
	 26, 34, 35,
	 27, 26, 35,
	 27, 35, 36,
	 28, 27, 36,
	 28, 36, 37,
	 29, 28, 37,
	 29, 37, 38,
	 30, 29, 38,
	 30, 38, 39,
	 31, 30, 39,
	 31, 39, 32,
	 24, 31, 32,
	 32, 40, 41,
	 33, 32, 41,
	 33, 41, 42,
	 34, 33, 42,
	 34, 42, 43,
	 35, 34, 43,
	 35, 43, 44,
	 36, 35, 44,
	 36, 44, 45,
	 37, 36, 45,
	 37, 45, 46,
	 38, 37, 46,
	 38, 46, 47,
	 39, 38, 47,
	 39, 47, 40,
	 32, 39, 40,
	 40, 48, 49,
	 41, 40, 49,
	 41, 49, 50,
	 42, 41, 50,
	 42, 50, 51,
	 43, 42, 51,
	 43, 51, 52,
	 44, 43, 52,
	 44, 52, 53,
	 45, 44, 53,
	 45, 53, 54,
	 46, 45, 54,
	 46, 54, 55,
	 47, 46, 55,
	 47, 55, 48,
	 40, 47, 48,
	 48, 56, 57,
	 49, 48, 57,
	 49, 57, 58,
	 50, 49, 58,
	 50, 58, 59,
	 51, 50, 59,
	 51, 59, 60,
	 52, 51, 60,
	 52, 60, 61,
	 53, 52, 61,
	 53, 61, 62,
	 54, 53, 62,
	 54, 62, 63,
	 55, 54, 63,
	 55, 63, 56,
	 48, 55, 56,
	 56, 64, 65,
	 57, 56, 65,
	 57, 65, 66,
	 58, 57, 66,
	 58, 66, 67,
	 59, 58, 67,
	 59, 67, 68,
	 60, 59, 68,
	 60, 68, 69,
	 61, 60, 69,
	 61, 69, 70,
	 62, 61, 70,
	 62, 70, 71,
	 63, 62, 71,
	 63, 71, 64,
	 56, 63, 64,
	 64, 72, 73,
	 65, 64, 73,
	 65, 73, 74,
	 66, 65, 74,
	 66, 74, 75,
	 67, 66, 75,
	 67, 75, 76,
	 68, 67, 76,
	 68, 76, 77,
	 69, 68, 77,
	 69, 77, 78,
	 70, 69, 78,
	 70, 78, 79,
	 71, 70, 79,
	 71, 79, 72,
	 64, 71, 72,
	 72, 80, 81,
	 73, 72, 81,
	 73, 81, 82,
	 74, 73, 82,
	 74, 82, 83,
	 75, 74, 83,
	 75, 83, 84,
	 76, 75, 84,
	 76, 84, 85,
	 77, 76, 85,
	 77, 85, 86,
	 78, 77, 86,
	 78, 86, 87,
	 79, 78, 87,
	 79, 87, 80,
	 72, 79, 80,
	 80, 88, 89,
	 81, 80, 89,
	 81, 89, 90,
	 82, 81, 90,
	 82, 90, 91,
	 83, 82, 91,
	 83, 91, 92,
	 84, 83, 92,
	 84, 92, 93,
	 85, 84, 93,
	 85, 93, 94,
	 86, 85, 94,
	 86, 94, 95,
	 87, 86, 95,
	 87, 95, 88,
	 80, 87, 88,
	 88, 96, 97,
	 89, 88, 97,
	 89, 97, 98,
	 90, 89, 98,
	 90, 98, 99,
	 91, 90, 99,
	 91, 99, 100,
	 92, 91, 100,
	 92, 100, 101,
	 93, 92, 101,
	 93, 101, 102,
	 94, 93, 102,
	 94, 102, 103,
	 95, 94, 103,
	 95, 103, 96,
	 88, 95, 96,
	 96, 104, 105,
	 97, 96, 105,
	 97, 105, 106,
	 98, 97, 106,
	 98, 106, 107,
	 99, 98, 107,
	 99, 107, 108,
	 100, 99, 108,
	 100, 108, 109,
	 101, 100, 109,
	 101, 109, 110,
	 102, 101, 110,
	 102, 110, 111,
	 103, 102, 111,
	 103, 111, 104,
	 96, 103, 104,
	 104, 112, 113,
	 105, 104, 113,
	 105, 113, 114,
	 106, 105, 114,
	 106, 114, 115,
	 107, 106, 115,
	 107, 115, 116,
	 108, 107, 116,
	 108, 116, 117,
	 109, 108, 117,
	 109, 117, 118,
	 110, 109, 118,
	 110, 118, 119,
	 111, 110, 119,
	 111, 119, 112,
	 104, 111, 112,
	 112, 120, 121,
	 113, 112, 121,
	 113, 121, 122,
	 114, 113, 122,
	 114, 122, 123,
	 115, 114, 123,
	 115, 123, 124,
	 116, 115, 124,
	 116, 124, 125,
	 117, 116, 125,
	 117, 125, 126,
	 118, 117, 126,
	 118, 126, 127,
	 119, 118, 127,
	 119, 127, 120,
	 112, 119, 120,
	 120, 128, 129,
	 121, 120, 129,
	 121, 129, 130,
	 122, 121, 130,
	 122, 130, 131,
	 123, 122, 131,
	 123, 131, 132,
	 124, 123, 132,
	 124, 132, 133,
	 125, 124, 133,
	 125, 133, 134,
	 126, 125, 134,
	 126, 134, 135,
	 127, 126, 135,
	 127, 135, 128,
	 120, 127, 128,
	 128, 136, 137,
	 129, 128, 137,
	 129, 137, 138,
	 130, 129, 138,
	 130, 138, 139,
	 131, 130, 139,
	 131, 139, 140,
	 132, 131, 140,
	 132, 140, 141,
	 133, 132, 141,
	 133, 141, 142,
	 134, 133, 142,
	 134, 142, 143,
	 135, 134, 143,
	 135, 143, 136,
	 128, 135, 136,
	 136, 144, 145,
	 137, 136, 145,
	 137, 145, 146,
	 138, 137, 146,
	 138, 146, 147,
	 139, 138, 147,
	 139, 147, 148,
	 140, 139, 148,
	 140, 148, 149,
	 141, 140, 149,
	 141, 149, 150,
	 142, 141, 150,
	 142, 150, 151,
	 143, 142, 151,
	 143, 151, 144,
	 136, 143, 144,
	 144, 152, 153,
	 145, 144, 153,
	 145, 153, 154,
	 146, 145, 154,
	 146, 154, 155,
	 147, 146, 155,
	 147, 155, 156,
	 148, 147, 156,
	 148, 156, 157,
	 149, 148, 157,
	 149, 157, 158,
	 150, 149, 158,
	 150, 158, 159,
	 151, 150, 159,
	 151, 159, 152,
	 144, 151, 152,
	 152, 160, 161,
	 153, 152, 161,
	 153, 161, 162,
	 154, 153, 162,
	 154, 162, 163,
	 155, 154, 163,
	 155, 163, 164,
	 156, 155, 164,
	 156, 164, 165,
	 157, 156, 165,
	 157, 165, 166,
	 158, 157, 166,
	 158, 166, 167,
	 159, 158, 167,
	 159, 167, 160,
	 152, 159, 160,
	 160, 168, 169,
	 161, 160, 169,
	 161, 169, 170,
	 162, 161, 170,
	 162, 170, 171,
	 163, 162, 171,
	 163, 171, 172,
	 164, 163, 172,
	 164, 172, 173,
	 165, 164, 173,
	 165, 173, 174,
	 166, 165, 174,
	 166, 174, 175,
	 167, 166, 175,
	 167, 175, 168,
	 160, 167, 168,
	 168, 176, 177,
	 169, 168, 177,
	 169, 177, 178,
	 170, 169, 178,
	 170, 178, 179,
	 171, 170, 179,
	 171, 179, 180,
	 172, 171, 180,
	 172, 180, 181,
	 173, 172, 181,
	 173, 181, 182,
	 174, 173, 182,
	 174, 182, 183,
	 175, 174, 183,
	 175, 183, 176,
	 168, 175, 176,
	 176, 184, 185,
	 177, 176, 185,
	 177, 185, 186,
	 178, 177, 186,
	 178, 186, 187,
	 179, 178, 187,
	 179, 187, 188,
	 180, 179, 188,
	 180, 188, 189,
	 181, 180, 189,
	 181, 189, 190,
	 182, 181, 190,
	 182, 190, 191,
	 183, 182, 191,
	 183, 191, 184,
	 176, 183, 184,
	 184, 192, 193,
	 185, 184, 193,
	 185, 193, 194,
	 186, 185, 194,
	 186, 194, 195,
	 187, 186, 195,
	 187, 195, 196,
	 188, 187, 196,
	 188, 196, 197,
	 189, 188, 197,
	 189, 197, 198,
	 190, 189, 198,
	 190, 198, 199,
	 191, 190, 199,
	 191, 199, 192,
	 184, 191, 192,
};
#define _Cable_Small_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Cable_Small_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Cable_Small_materials[1] =
{
	{
		{{ 0.027209f, 0.027209f, 0.027209f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		225.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Black",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Cable_Small_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Cable_Small_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Cable_Small_batches[1][2] =
{
	{ 1152, 0 },
};
#define _Cable_Small_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Cable_Small_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Cable_Small_meshes[1] =
{
	{
		"default",
		1152,
		0,
		0,
	},
};
#define _Cable_Small_meshes_
#endif
