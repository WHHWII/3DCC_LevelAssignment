// "Sign_2.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Sign_2.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Sign_2_version_
const char Sign_2_version[4] = { '0','1','9','d' };
#define _Sign_2_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Sign_2_vertexcount_
const unsigned Sign_2_vertexcount = 80;
#define _Sign_2_vertexcount_
#endif
#ifndef _Sign_2_indexcount_
const unsigned Sign_2_indexcount = 156;
#define _Sign_2_indexcount_
#endif
#ifndef _Sign_2_materialcount_
const unsigned Sign_2_materialcount = 2; // can be used for batched draws
#define _Sign_2_materialcount_
#endif
#ifndef _Sign_2_meshcount_
const unsigned Sign_2_meshcount = 2;
#define _Sign_2_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Sign_2_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Sign_2_vertices[80] =
{
	{	{ 0.646935f, -0.227702f, 0.027711f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.646935f, -0.227702f, -0.003173f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.646934f, 0.234534f, -0.003173f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.646934f, 0.234534f, 0.027711f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.592277f, -0.194584f, -0.003173f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.592277f, -0.194584f, -0.003173f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.646935f, -0.227702f, -0.003173f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.646935f, -0.227702f, -0.003173f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.592277f, 0.191168f, -0.003173f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.646934f, 0.234534f, -0.003173f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.646935f, 0.234533f, -0.003173f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.592277f, 0.191168f, -0.003173f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.592277f, 0.191168f, -0.003173f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.592277f, 0.191168f, -0.003173f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.592277f, 0.191168f, 0.007001f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.592277f, 0.191168f, 0.007001f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.646935f, -0.227702f, 0.027711f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.646935f, -0.227702f, 0.027711f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.646935f, -0.227702f, 0.058596f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.646935f, -0.227702f, 0.058595f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.646935f, 0.234533f, 0.027711f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.646934f, 0.234534f, 0.027711f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.646934f, 0.234534f, -0.003173f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.646935f, 0.234533f, -0.003173f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.592277f, -0.194584f, 0.007001f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ 0.592277f, 0.191168f, 0.007001f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ 0.592277f, 0.191168f, -0.003173f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ 0.592277f, -0.194584f, -0.003173f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.592277f, -0.194584f, 0.048421f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 0.592277f, -0.194584f, 0.048421f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 0.592277f, 0.191168f, 0.048421f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ -0.592277f, 0.191168f, 0.048421f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 0.646934f, 0.234534f, 0.058596f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.646935f, -0.227702f, 0.058596f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.592277f, -0.194584f, 0.007001f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.592277f, -0.194584f, 0.007001f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.592277f, -0.194584f, -0.003173f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.592277f, -0.194584f, -0.003173f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.646934f, 0.234534f, 0.058596f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 0.592277f, 0.191168f, 0.058596f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 0.592277f, -0.194584f, 0.058596f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 0.646935f, -0.227702f, 0.058596f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ -0.592277f, -0.194584f, 0.048421f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.592277f, 0.191168f, 0.048421f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.592277f, 0.191168f, 0.058595f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.592277f, -0.194584f, 0.058595f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.592277f, 0.191168f, 0.058595f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ -0.646935f, 0.234533f, 0.058595f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ -0.646935f, -0.227702f, 0.058595f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ -0.592277f, -0.194584f, 0.058595f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ -0.646935f, 0.234533f, 0.058595f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.646934f, 0.234534f, 0.058596f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.592277f, 0.191168f, 0.058596f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ 0.592277f, 0.191168f, 0.048421f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ 0.592277f, -0.194584f, 0.048421f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ 0.592277f, -0.194584f, 0.058596f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.646935f, -0.227702f, 0.027711f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.646935f, -0.227702f, 0.058595f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.646935f, 0.234533f, 0.058595f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.646935f, 0.234533f, 0.027711f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.592277f, 0.191168f, -0.003173f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.592277f, 0.191168f, 0.007001f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.592277f, -0.194584f, 0.007001f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.592277f, -0.194584f, -0.003173f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.592277f, -0.194584f, 0.058595f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.592277f, -0.194584f, 0.058596f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.592277f, -0.194584f, 0.048421f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.592277f, -0.194584f, 0.048421f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.646935f, -0.227702f, -0.003173f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.646935f, -0.227702f, -0.003173f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.646935f, 0.234533f, -0.003173f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.646935f, -0.227702f, -0.003173f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.592277f, 0.191168f, 0.048421f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.592277f, 0.191168f, 0.048421f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.592277f, 0.191168f, 0.058596f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.592277f, 0.191168f, 0.058595f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.592277f, 0.191168f, 0.001214f },	{ 0.031746f, 0.731597f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.592277f, 0.191168f, 0.001215f },	{ 0.424740f, 0.731597f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.592277f, -0.194584f, 0.001215f },	{ 0.424740f, 0.874618f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.592277f, -0.194584f, 0.001214f },	{ 0.031746f, 0.874618f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
};
#define _Sign_2_vertices_
#endif
#ifndef _Sign_2_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Sign_2_indices[156] =
{
	 0, 1, 2,
	 3, 0, 2,
	 4, 5, 6,
	 7, 4, 6,
	 5, 8, 9,
	 6, 5, 9,
	 10, 9, 8,
	 11, 10, 8,
	 12, 13, 14,
	 15, 12, 14,
	 16, 17, 18,
	 19, 16, 18,
	 20, 21, 22,
	 23, 20, 22,
	 24, 25, 26,
	 27, 24, 26,
	 28, 29, 30,
	 31, 28, 30,
	 32, 33, 0,
	 3, 32, 0,
	 34, 35, 36,
	 37, 34, 36,
	 38, 39, 40,
	 41, 38, 40,
	 42, 43, 44,
	 45, 42, 44,
	 46, 39, 38,
	 47, 46, 38,
	 48, 41, 40,
	 49, 48, 40,
	 49, 46, 47,
	 48, 49, 47,
	 50, 51, 21,
	 20, 50, 21,
	 52, 53, 54,
	 55, 52, 54,
	 56, 57, 58,
	 59, 56, 58,
	 60, 61, 62,
	 63, 60, 62,
	 64, 65, 66,
	 67, 64, 66,
	 68, 69, 17,
	 16, 68, 17,
	 10, 11, 4,
	 7, 10, 4,
	 70, 71, 56,
	 59, 70, 56,
	 72, 73, 74,
	 75, 72, 74,
	 76, 77, 78,
	 79, 76, 78,
};
#define _Sign_2_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Sign_2_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Sign_2_materials[2] =
{
	{
		{{ 0.173351f, 0.173351f, 0.173351f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		225.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Grey",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
	{
		{{ 0.800000f, 0.800000f, 0.800000f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		225.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Texture_Signs",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Sign_2_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Sign_2_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Sign_2_batches[2][2] =
{
	{ 150, 0 },
	{ 6, 150 },
};
#define _Sign_2_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Sign_2_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Sign_2_meshes[2] =
{
	{
		"default",
		150,
		0,
		0,
	},
	{
		"default",
		6,
		150,
		1,
	},
};
#define _Sign_2_meshes_
#endif
