// "Sign_Corner_3.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Sign_Corner_3.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Sign_Corner_3_version_
const char Sign_Corner_3_version[4] = { '0','1','9','d' };
#define _Sign_Corner_3_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Sign_Corner_3_vertexcount_
const unsigned Sign_Corner_3_vertexcount = 142;
#define _Sign_Corner_3_vertexcount_
#endif
#ifndef _Sign_Corner_3_indexcount_
const unsigned Sign_Corner_3_indexcount = 372;
#define _Sign_Corner_3_indexcount_
#endif
#ifndef _Sign_Corner_3_materialcount_
const unsigned Sign_Corner_3_materialcount = 2; // can be used for batched draws
#define _Sign_Corner_3_materialcount_
#endif
#ifndef _Sign_Corner_3_meshcount_
const unsigned Sign_Corner_3_meshcount = 2;
#define _Sign_Corner_3_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Sign_Corner_3_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Sign_Corner_3_vertices[142] =
{
	{	{ -0.144778f, -0.320107f, -0.016905f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.071000f, 0.986400f, -0.148500f }	},
	{	{ -0.220320f, -0.305717f, 0.042563f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.055100f, 0.984200f, -0.168100f }	},
	{	{ -0.132326f, -0.305717f, 0.101359f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.102200f, 0.989000f, -0.107400f }	},
	{	{ -0.052642f, -0.320107f, 0.044658f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.105900f, 0.989100f, -0.102200f }	},
	{	{ -0.052642f, 0.320107f, 0.044658f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.105900f, -0.989100f, -0.102200f }	},
	{	{ -0.132326f, 0.305717f, 0.101359f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.102200f, -0.989000f, -0.107400f }	},
	{	{ -0.220320f, 0.305717f, 0.042563f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.055100f, -0.984200f, -0.168100f }	},
	{	{ -0.144778f, 0.320107f, -0.016905f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.071000f, -0.986400f, -0.148500f }	},
	{	{ -1.016742f, 0.320107f, -0.038523f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.999300f, -0.000000f, 0.037100f }	},
	{	{ -1.018983f, 0.305717f, 0.021917f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.999300f, -0.000000f, 0.037100f }	},
	{	{ -1.018983f, -0.305717f, 0.021917f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.999300f, -0.000000f, 0.037100f }	},
	{	{ -1.016742f, -0.320107f, -0.038523f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.999300f, -0.000000f, 0.037100f }	},
	{	{ -0.253460f, -0.320107f, -0.038523f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.028500f, 0.979400f, -0.199900f }	},
	{	{ -0.324116f, -0.305717f, 0.021917f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.010300f, 0.975400f, -0.220200f }	},
	{	{ 0.030539f, -0.320107f, 1.602169f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.007700f, 0.000000f, -1.000000f }	},
	{	{ -0.052884f, -0.305717f, 1.602808f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.007700f, 0.000000f, -1.000000f }	},
	{	{ -0.052884f, 0.305717f, 1.602808f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.007700f, 0.000000f, -1.000000f }	},
	{	{ 0.030539f, 0.320107f, 1.602169f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.007700f, 0.000000f, -1.000000f }	},
	{	{ -0.324116f, 0.305717f, 0.021917f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.010300f, -0.975400f, -0.220200f }	},
	{	{ -0.253460f, 0.320107f, -0.038523f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.028500f, -0.979400f, -0.199900f }	},
	{	{ -0.073530f, -0.305717f, 0.189353f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.138700f, 0.988900f, -0.053200f }	},
	{	{ -0.052884f, -0.305717f, 0.293149f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.163600f, 0.986500f, -0.011400f }	},
	{	{ 0.030539f, -0.320107f, 0.245476f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.159100f, 0.987100f, -0.019500f }	},
	{	{ 0.008921f, -0.320107f, 0.136794f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.135100f, 0.989100f, -0.058900f }	},
	{	{ 0.030539f, 0.320107f, 1.602169f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.170000f, -0.985400f, -0.000000f }	},
	{	{ -0.052884f, 0.305717f, 1.602808f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.170000f, -0.985400f, -0.000000f }	},
	{	{ -0.052884f, 0.305717f, 0.293149f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.163600f, -0.986500f, -0.011400f }	},
	{	{ 0.030539f, 0.320107f, 0.245476f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.159100f, -0.987100f, -0.019500f }	},
	{	{ -0.073530f, 0.305717f, 0.189353f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.138700f, -0.988900f, -0.053200f }	},
	{	{ 0.008921f, 0.320107f, 0.136794f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.135100f, -0.989100f, -0.058900f }	},
	{	{ -0.052884f, -0.305717f, 1.602808f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.170000f, 0.985400f, 0.000000f }	},
	{	{ 0.030539f, -0.320107f, 1.602169f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.170000f, 0.985400f, 0.000000f }	},
	{	{ -1.016742f, -0.320107f, -0.038523f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.972800f, -0.231600f }	},
	{	{ -1.018983f, -0.305717f, 0.021917f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.972800f, -0.231600f }	},
	{	{ -1.018983f, 0.305717f, 0.021917f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.972800f, -0.231600f }	},
	{	{ -1.016742f, 0.320107f, -0.038523f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.972800f, -0.231600f }	},
	{	{ -0.138046f, -0.363452f, 0.107373f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.223406f, -0.363452f, 0.051978f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.148753f, -0.363452f, -0.008590f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.058569f, -0.363452f, 0.050384f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.138046f, 0.363452f, 0.107373f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.058569f, 0.363452f, 0.050384f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.148753f, 0.363452f, -0.008590f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.223406f, 0.363452f, 0.051978f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -1.061791f, -0.363452f, 0.028768f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.988200f, -0.000000f, -0.153400f }	},
	{	{ -1.061791f, 0.363452f, 0.028768f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.988200f, -0.000000f, -0.153400f }	},
	{	{ -1.052690f, 0.363452f, -0.029844f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.988200f, -0.000000f, -0.153400f }	},
	{	{ -1.052690f, -0.363452f, -0.029844f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.988200f, -0.000000f, -0.153400f }	},
	{	{ -0.324693f, -0.363452f, 0.034244f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.255054f, -0.363452f, -0.027330f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.058925f, 0.363452f, 1.644507f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.062300f, 0.000000f, 0.998100f }	},
	{	{ -0.058925f, -0.363452f, 1.644507f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.062300f, 0.000000f, 0.998100f }	},
	{	{ 0.023699f, -0.363452f, 1.639351f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.062300f, 0.000000f, 0.998100f }	},
	{	{ 0.023699f, 0.363452f, 1.639351f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.062300f, 0.000000f, 0.998100f }	},
	{	{ -0.324693f, 0.363452f, 0.034244f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.255054f, 0.363452f, -0.027330f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.062046f, -0.363452f, 0.293788f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.081294f, -0.363452f, 0.192332f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.001357f, -0.363452f, 0.140089f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.021630f, -0.363452f, 0.246568f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.062046f, 0.363452f, 0.293788f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.058925f, 0.363452f, 1.644507f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.023699f, 0.363452f, 1.639351f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.021630f, 0.363452f, 0.246568f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.081294f, 0.363452f, 0.192331f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.001357f, 0.363452f, 0.140089f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.058925f, -0.363452f, 1.644507f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.023699f, -0.363452f, 1.639351f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -1.061791f, -0.363452f, 0.028768f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -1.052690f, -0.363452f, -0.029844f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -1.061791f, 0.363452f, 0.028768f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -1.052690f, 0.363452f, -0.029844f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -1.052690f, -0.363452f, -0.029844f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.104400f, -0.126500f, -0.986500f }	},
	{	{ -1.052690f, 0.363452f, -0.029844f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.104400f, 0.126500f, -0.986500f }	},
	{	{ -1.016742f, 0.320107f, -0.038523f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.122800f, 0.109100f, -0.986400f }	},
	{	{ -1.016742f, -0.320107f, -0.038523f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.122800f, -0.109100f, -0.986400f }	},
	{	{ 0.023699f, 0.363452f, 1.639351f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.991700f, 0.098800f, 0.082100f }	},
	{	{ 0.023699f, -0.363452f, 1.639351f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.991700f, -0.098800f, 0.082100f }	},
	{	{ 0.030539f, -0.320107f, 1.602169f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.991800f, -0.087400f, 0.093800f }	},
	{	{ 0.030539f, 0.320107f, 1.602169f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.991800f, 0.087400f, 0.093800f }	},
	{	{ 0.021630f, -0.363452f, 0.246568f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.977900f, -0.186600f, -0.094200f }	},
	{	{ 0.001357f, -0.363452f, 0.140089f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.907600f, -0.191900f, -0.373400f }	},
	{	{ 0.008921f, -0.320107f, 0.136794f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.907300f, -0.191900f, -0.374300f }	},
	{	{ 0.030539f, -0.320107f, 0.245476f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.977800f, -0.186600f, -0.094800f }	},
	{	{ 0.001357f, 0.363452f, 0.140089f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.907600f, 0.191900f, -0.373400f }	},
	{	{ 0.021630f, 0.363452f, 0.246568f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.977900f, 0.186600f, -0.094200f }	},
	{	{ 0.030539f, 0.320107f, 0.245476f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.977800f, 0.186600f, -0.094800f }	},
	{	{ 0.008921f, 0.320107f, 0.136794f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.907300f, 0.191900f, -0.374300f }	},
	{	{ -0.058569f, -0.363452f, 0.050384f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.691900f, -0.192800f, -0.695700f }	},
	{	{ -0.052642f, -0.320107f, 0.044658f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.692600f, -0.192800f, -0.695100f }	},
	{	{ -0.058569f, 0.363452f, 0.050384f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.691900f, 0.192800f, -0.695700f }	},
	{	{ -0.052642f, 0.320107f, 0.044658f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.692600f, 0.192800f, -0.695100f }	},
	{	{ -0.148753f, -0.363452f, -0.008590f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.365700f, -0.214900f, -0.905600f }	},
	{	{ -0.144778f, -0.320107f, -0.016905f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.368600f, -0.214600f, -0.904500f }	},
	{	{ -0.148753f, 0.363452f, -0.008590f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.365700f, 0.214900f, -0.905600f }	},
	{	{ -0.144778f, 0.320107f, -0.016905f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.368600f, 0.214600f, -0.904500f }	},
	{	{ -0.255054f, -0.363452f, -0.027330f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.090300f, -0.226400f, -0.969800f }	},
	{	{ -0.253460f, -0.320107f, -0.038523f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.091600f, -0.226400f, -0.969700f }	},
	{	{ -0.255054f, 0.363452f, -0.027330f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.090300f, 0.226400f, -0.969800f }	},
	{	{ -0.253460f, 0.320107f, -0.038523f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.091600f, 0.226400f, -0.969700f }	},
	{	{ -1.061791f, 0.363452f, 0.028768f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.062500f, -0.098600f, 0.993200f }	},
	{	{ -1.061791f, -0.363452f, 0.028768f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.062500f, 0.098600f, 0.993200f }	},
	{	{ -1.018983f, -0.305717f, 0.021917f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.082700f, 0.078000f, 0.993500f }	},
	{	{ -1.018983f, 0.305717f, 0.021917f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.082700f, -0.078000f, 0.993500f }	},
	{	{ -0.058925f, -0.363452f, 1.644507f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.995300f, 0.079000f, -0.056800f }	},
	{	{ -0.058925f, 0.363452f, 1.644507f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.995300f, -0.079000f, -0.056800f }	},
	{	{ -0.052884f, 0.305717f, 1.602808f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.995200f, -0.061400f, -0.076400f }	},
	{	{ -0.052884f, -0.305717f, 1.602808f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.995200f, 0.061400f, -0.076400f }	},
	{	{ -0.081294f, -0.363452f, 0.192332f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.914600f, 0.146400f, 0.377000f }	},
	{	{ -0.062046f, -0.363452f, 0.293788f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.985500f, 0.140200f, 0.095600f }	},
	{	{ -0.052884f, -0.305717f, 0.293149f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.985500f, 0.140200f, 0.095100f }	},
	{	{ -0.073530f, -0.305717f, 0.189353f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.914900f, 0.146400f, 0.376200f }	},
	{	{ -0.062046f, 0.363452f, 0.293788f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.985500f, -0.140200f, 0.095600f }	},
	{	{ -0.081294f, 0.363452f, 0.192331f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.914600f, -0.146400f, 0.377000f }	},
	{	{ -0.073530f, 0.305717f, 0.189353f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.914900f, -0.146400f, 0.376200f }	},
	{	{ -0.052884f, 0.305717f, 0.293149f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.985500f, -0.140200f, 0.095100f }	},
	{	{ -0.138046f, -0.363452f, 0.107373f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.697400f, 0.148300f, 0.701200f }	},
	{	{ -0.132326f, -0.305717f, 0.101359f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.696800f, 0.148300f, 0.701700f }	},
	{	{ -0.138046f, 0.363452f, 0.107373f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.697400f, -0.148300f, 0.701200f }	},
	{	{ -0.132326f, 0.305717f, 0.101359f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.696800f, -0.148300f, 0.701700f }	},
	{	{ -0.223406f, -0.363452f, 0.051978f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.370400f, 0.172900f, 0.912600f }	},
	{	{ -0.220320f, -0.305717f, 0.042563f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.367800f, 0.173100f, 0.913600f }	},
	{	{ -0.223406f, 0.363452f, 0.051978f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.370400f, -0.172900f, 0.912600f }	},
	{	{ -0.220320f, 0.305717f, 0.042563f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.367800f, -0.173100f, 0.913600f }	},
	{	{ -0.324693f, -0.363452f, 0.034244f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.093100f, 0.177200f, 0.979800f }	},
	{	{ -0.324116f, -0.305717f, 0.021917f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.092000f, 0.177000f, 0.979900f }	},
	{	{ -0.324693f, 0.363452f, 0.034244f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.093100f, -0.177200f, 0.979800f }	},
	{	{ -0.324116f, 0.305717f, 0.021917f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.092000f, -0.177000f, 0.979900f }	},
	{	{ -1.015019f, 0.311539f, -0.005790f },	{ 0.280257f, 0.263712f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.272166f, 0.311539f, -0.005790f },	{ 0.422972f, 0.263712f, 0.000000f },	{ 0.098000f, -0.000000f, -0.995200f }	},
	{	{ -0.272166f, -0.311540f, -0.005789f },	{ 0.422972f, 0.383415f, 0.000000f },	{ 0.098000f, -0.000000f, -0.995200f }	},
	{	{ -1.015019f, -0.311540f, -0.005789f },	{ 0.280258f, 0.383415f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.016808f, -0.311540f, 0.164835f },	{ 0.485128f, 0.383415f, 0.000000f },	{ 0.923900f, -0.000000f, -0.382700f }	},
	{	{ -0.016808f, 0.311539f, 0.164835f },	{ 0.485128f, 0.263712f, 0.000000f },	{ 0.923900f, -0.000000f, -0.382700f }	},
	{	{ 0.004231f, 0.311539f, 0.270608f },	{ 0.505847f, 0.263712f, 0.000000f },	{ 0.995200f, -0.000000f, -0.098000f }	},
	{	{ 0.004231f, -0.311540f, 0.270608f },	{ 0.505847f, 0.383415f, 0.000000f },	{ 0.995200f, -0.000000f, -0.098000f }	},
	{	{ -0.076724f, -0.311540f, 0.075166f },	{ 0.464409f, 0.383415f, 0.000000f },	{ 0.707100f, -0.000000f, -0.707100f }	},
	{	{ -0.076724f, 0.311539f, 0.075165f },	{ 0.464409f, 0.263712f, 0.000000f },	{ 0.707100f, -0.000000f, -0.707100f }	},
	{	{ -0.166393f, -0.311540f, 0.015250f },	{ 0.443690f, 0.383415f, 0.000000f },	{ 0.382700f, -0.000000f, -0.923900f }	},
	{	{ -0.166393f, 0.311539f, 0.015250f },	{ 0.443690f, 0.263712f, 0.000000f },	{ 0.382700f, -0.000000f, -0.923900f }	},
	{	{ 0.004231f, 0.311539f, 1.590989f },	{ 0.759513f, 0.263712f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.004231f, -0.311540f, 1.590989f },	{ 0.759513f, 0.383415f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
};
#define _Sign_Corner_3_vertices_
#endif
#ifndef _Sign_Corner_3_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Sign_Corner_3_indices[372] =
{
	 0, 1, 2,
	 3, 0, 2,
	 4, 5, 6,
	 7, 4, 6,
	 8, 9, 10,
	 11, 8, 10,
	 12, 13, 1,
	 0, 12, 1,
	 14, 15, 16,
	 17, 14, 16,
	 7, 6, 18,
	 19, 7, 18,
	 20, 21, 22,
	 23, 20, 22,
	 24, 25, 26,
	 27, 24, 26,
	 27, 26, 28,
	 29, 27, 28,
	 22, 21, 30,
	 31, 22, 30,
	 3, 2, 20,
	 23, 3, 20,
	 32, 33, 13,
	 12, 32, 13,
	 29, 28, 5,
	 4, 29, 5,
	 19, 18, 34,
	 35, 19, 34,
	 36, 37, 38,
	 39, 36, 38,
	 40, 41, 42,
	 43, 40, 42,
	 44, 45, 46,
	 47, 44, 46,
	 37, 48, 49,
	 38, 37, 49,
	 50, 51, 52,
	 53, 50, 52,
	 54, 43, 42,
	 55, 54, 42,
	 56, 57, 58,
	 59, 56, 58,
	 60, 61, 62,
	 63, 60, 62,
	 64, 60, 63,
	 65, 64, 63,
	 66, 56, 59,
	 67, 66, 59,
	 57, 36, 39,
	 58, 57, 39,
	 48, 68, 69,
	 49, 48, 69,
	 40, 64, 65,
	 41, 40, 65,
	 70, 54, 55,
	 71, 70, 55,
	 72, 73, 74,
	 75, 72, 74,
	 76, 77, 78,
	 79, 76, 78,
	 80, 81, 82,
	 83, 80, 82,
	 84, 85, 86,
	 87, 84, 86,
	 81, 88, 89,
	 82, 81, 89,
	 90, 84, 87,
	 91, 90, 87,
	 88, 92, 93,
	 89, 88, 93,
	 94, 90, 91,
	 95, 94, 91,
	 92, 96, 97,
	 93, 92, 97,
	 98, 94, 95,
	 99, 98, 95,
	 85, 76, 79,
	 86, 85, 79,
	 77, 80, 83,
	 78, 77, 83,
	 96, 72, 75,
	 97, 96, 75,
	 73, 98, 99,
	 74, 73, 99,
	 100, 101, 102,
	 103, 100, 102,
	 104, 105, 106,
	 107, 104, 106,
	 108, 109, 110,
	 111, 108, 110,
	 112, 113, 114,
	 115, 112, 114,
	 116, 108, 111,
	 117, 116, 111,
	 113, 118, 119,
	 114, 113, 119,
	 120, 116, 117,
	 121, 120, 117,
	 118, 122, 123,
	 119, 118, 123,
	 124, 120, 121,
	 125, 124, 121,
	 122, 126, 127,
	 123, 122, 127,
	 105, 112, 115,
	 106, 105, 115,
	 109, 104, 107,
	 110, 109, 107,
	 101, 124, 125,
	 102, 101, 125,
	 126, 100, 103,
	 127, 126, 103,
	 128, 129, 130,
	 131, 128, 130,
	 132, 133, 134,
	 135, 132, 134,
	 136, 137, 133,
	 132, 136, 133,
	 138, 139, 137,
	 136, 138, 137,
	 130, 129, 139,
	 138, 130, 139,
	 140, 141, 135,
	 134, 140, 135,
};
#define _Sign_Corner_3_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Sign_Corner_3_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Sign_Corner_3_materials[2] =
{
	{
		{{ 0.066805f, 0.066805f, 0.066805f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		225.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"DarkGrey",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
	{
		{{ 0.800000f, 0.800000f, 0.800000f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		225.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Texture_Signs",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Sign_Corner_3_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Sign_Corner_3_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Sign_Corner_3_batches[2][2] =
{
	{ 336, 0 },
	{ 36, 336 },
};
#define _Sign_Corner_3_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Sign_Corner_3_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Sign_Corner_3_meshes[2] =
{
	{
		"default",
		336,
		0,
		0,
	},
	{
		"default",
		36,
		336,
		1,
	},
};
#define _Sign_Corner_3_meshes_
#endif
