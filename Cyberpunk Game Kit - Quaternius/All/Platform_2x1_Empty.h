// "Platform_2x1_Empty.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Platform_2x1_Empty.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Platform_2x1_Empty_version_
const char Platform_2x1_Empty_version[4] = { '0','1','9','d' };
#define _Platform_2x1_Empty_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Platform_2x1_Empty_vertexcount_
const unsigned Platform_2x1_Empty_vertexcount = 144;
#define _Platform_2x1_Empty_vertexcount_
#endif
#ifndef _Platform_2x1_Empty_indexcount_
const unsigned Platform_2x1_Empty_indexcount = 228;
#define _Platform_2x1_Empty_indexcount_
#endif
#ifndef _Platform_2x1_Empty_materialcount_
const unsigned Platform_2x1_Empty_materialcount = 3; // can be used for batched draws
#define _Platform_2x1_Empty_materialcount_
#endif
#ifndef _Platform_2x1_Empty_meshcount_
const unsigned Platform_2x1_Empty_meshcount = 3;
#define _Platform_2x1_Empty_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Platform_2x1_Empty_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Platform_2x1_Empty_vertices[144] =
{
	{	{ -0.917443f, -0.120266f, -0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.917443f, -0.120266f, -0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.917443f, -0.120266f, 0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.917443f, -0.120266f, 0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.917443f, 0.012625f, -0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.814000f, -0.580900f }	},
	{	{ -0.946291f, 0.033214f, -0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.814000f, -0.580900f }	},
	{	{ 0.946291f, 0.033214f, -0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.814000f, -0.580900f }	},
	{	{ 0.917443f, 0.012625f, -0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.814000f, -0.580900f }	},
	{	{ 0.917443f, 0.012625f, -0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.580900f, -0.814000f, -0.000000f }	},
	{	{ 0.946291f, 0.033214f, -0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.580900f, -0.814000f, -0.000000f }	},
	{	{ 0.946291f, 0.033214f, 0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.580900f, -0.814000f, -0.000000f }	},
	{	{ 0.917443f, 0.012625f, 0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.580900f, -0.814000f, -0.000000f }	},
	{	{ 0.917443f, 0.012625f, 0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.814000f, 0.580900f }	},
	{	{ 0.946291f, 0.033214f, 0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.814000f, 0.580900f }	},
	{	{ -0.946291f, 0.033214f, 0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.814000f, 0.580900f }	},
	{	{ -0.917443f, 0.012625f, 0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.814000f, 0.580900f }	},
	{	{ -0.917443f, 0.012625f, 0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.580900f, -0.814000f, -0.000000f }	},
	{	{ -0.946291f, 0.033214f, 0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.580900f, -0.814000f, -0.000000f }	},
	{	{ -0.946291f, 0.033214f, -0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.580900f, -0.814000f, -0.000000f }	},
	{	{ -0.917443f, 0.012625f, -0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.580900f, -0.814000f, -0.000000f }	},
	{	{ 0.832346f, 0.081734f, -0.272104f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.832346f, 0.081734f, -0.272104f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.832346f, 0.081734f, 0.272104f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.832346f, 0.081734f, 0.272104f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.917443f, -0.120266f, -0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.917443f, -0.062713f, -0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.917443f, -0.062713f, -0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.917443f, -0.120266f, -0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.903164f, -0.045050f, 0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.008600f, -1.000000f, -0.000000f }	},
	{	{ 0.903164f, -0.045050f, -0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.008600f, -1.000000f, -0.000000f }	},
	{	{ 0.917443f, -0.044928f, -0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.008600f, -1.000000f, -0.000000f }	},
	{	{ 0.917443f, -0.044928f, 0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.008600f, -1.000000f, -0.000000f }	},
	{	{ 0.917443f, -0.120266f, -0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.917443f, -0.062713f, -0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.917443f, -0.062713f, 0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.917443f, -0.120266f, 0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.903164f, -0.045050f, 0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, 0.008600f }	},
	{	{ 0.903164f, -0.045050f, 0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, 0.008600f }	},
	{	{ 0.917443f, -0.044928f, 0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, 0.008600f }	},
	{	{ -0.917443f, -0.044928f, 0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, 0.008600f }	},
	{	{ 0.917443f, -0.120266f, 0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ 0.917443f, -0.062713f, 0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.917443f, -0.062713f, 0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.917443f, -0.120266f, 0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.903164f, -0.045050f, -0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.008600f, -1.000000f, -0.000000f }	},
	{	{ -0.903164f, -0.045050f, 0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.008600f, -1.000000f, -0.000000f }	},
	{	{ -0.917443f, -0.044928f, 0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.008600f, -1.000000f, -0.000000f }	},
	{	{ -0.917443f, -0.044928f, -0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.008600f, -1.000000f, -0.000000f }	},
	{	{ -0.917443f, -0.120266f, 0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.917443f, -0.062713f, 0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.917443f, -0.062713f, -0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.917443f, -0.120266f, -0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.903164f, -0.062591f, -0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.008600f }	},
	{	{ 0.903164f, -0.062591f, -0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.008600f }	},
	{	{ 0.917443f, -0.062713f, -0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.008600f }	},
	{	{ -0.917443f, -0.062713f, -0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.008600f }	},
	{	{ -0.903164f, -0.062591f, -0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.903164f, -0.045050f, -0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.903164f, -0.045050f, -0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.903164f, -0.062591f, -0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.903164f, -0.062591f, -0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.903164f, -0.045050f, -0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.903164f, -0.045050f, 0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.903164f, -0.062591f, 0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.903164f, -0.062591f, 0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ 0.903164f, -0.045050f, 0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.903164f, -0.045050f, 0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.903164f, -0.062591f, 0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.903164f, -0.062591f, 0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.903164f, -0.045050f, 0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.903164f, -0.045050f, -0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.903164f, -0.062591f, -0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.903164f, -0.045050f, -0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.008600f }	},
	{	{ -0.903164f, -0.045050f, -0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.008600f }	},
	{	{ -0.917443f, -0.044928f, -0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.008600f }	},
	{	{ 0.917443f, -0.044928f, -0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.008600f }	},
	{	{ -0.903164f, -0.062591f, 0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.008600f, 1.000000f, -0.000000f }	},
	{	{ -0.903164f, -0.062591f, -0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.008600f, 1.000000f, -0.000000f }	},
	{	{ -0.917443f, -0.062713f, -0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.008600f, 1.000000f, -0.000000f }	},
	{	{ -0.917443f, -0.062713f, 0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.008600f, 1.000000f, -0.000000f }	},
	{	{ 0.903164f, -0.062591f, 0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, 0.008600f }	},
	{	{ -0.903164f, -0.062591f, 0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, 0.008600f }	},
	{	{ -0.917443f, -0.062713f, 0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, 0.008600f }	},
	{	{ 0.917443f, -0.062713f, 0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, 0.008600f }	},
	{	{ 0.903164f, -0.062591f, -0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.008600f, 1.000000f, -0.000000f }	},
	{	{ 0.903164f, -0.062591f, 0.342921f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.008600f, 1.000000f, -0.000000f }	},
	{	{ 0.917443f, -0.062713f, 0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.008600f, 1.000000f, -0.000000f }	},
	{	{ 0.917443f, -0.062713f, -0.357200f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.008600f, 1.000000f, -0.000000f }	},
	{	{ -0.946291f, 0.033214f, 0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.946291f, 0.103987f, 0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.946291f, 0.103987f, -0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.946291f, 0.033214f, -0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.946291f, 0.033214f, 0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ 0.946291f, 0.103987f, 0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.946291f, 0.103987f, 0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.946291f, 0.033214f, 0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ 0.946291f, 0.033214f, -0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.946291f, 0.103987f, -0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.946291f, 0.103987f, 0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.946291f, 0.033214f, 0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.946291f, 0.033214f, -0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.946291f, 0.103987f, -0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.946291f, 0.103987f, -0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.946291f, 0.033214f, -0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.851760f, 0.103987f, -0.291518f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.851760f, 0.103987f, 0.291518f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.946291f, 0.103987f, 0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.946291f, 0.103987f, -0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.832346f, 0.081734f, -0.272104f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.657400f, 0.753500f }	},
	{	{ 0.832346f, 0.081734f, -0.272104f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.657400f, 0.753500f }	},
	{	{ 0.851760f, 0.103987f, -0.291518f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.657400f, 0.753500f }	},
	{	{ -0.851760f, 0.103987f, -0.291518f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.657400f, 0.753500f }	},
	{	{ -0.851760f, 0.103987f, 0.291518f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.851760f, 0.103987f, -0.291518f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.946291f, 0.103987f, -0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.946291f, 0.103987f, 0.386048f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.832346f, 0.081734f, 0.272104f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.657400f, -0.753500f }	},
	{	{ -0.832346f, 0.081734f, 0.272104f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.657400f, -0.753500f }	},
	{	{ -0.851760f, 0.103987f, 0.291518f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.657400f, -0.753500f }	},
	{	{ 0.851760f, 0.103987f, 0.291518f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.657400f, -0.753500f }	},
	{	{ 0.832346f, 0.081734f, -0.272104f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.753500f, 0.657400f, -0.000000f }	},
	{	{ 0.832346f, 0.081734f, 0.272104f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.753500f, 0.657400f, -0.000000f }	},
	{	{ 0.851760f, 0.103987f, 0.291518f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.753500f, 0.657400f, -0.000000f }	},
	{	{ 0.851760f, 0.103987f, -0.291518f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.753500f, 0.657400f, -0.000000f }	},
	{	{ -0.832346f, 0.081734f, 0.272104f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.753500f, 0.657400f, -0.000000f }	},
	{	{ -0.832346f, 0.081734f, -0.272104f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.753500f, 0.657400f, -0.000000f }	},
	{	{ -0.851760f, 0.103987f, -0.291518f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.753500f, 0.657400f, -0.000000f }	},
	{	{ -0.851760f, 0.103987f, 0.291518f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.753500f, 0.657400f, -0.000000f }	},
	{	{ -0.917443f, -0.044928f, 0.357200f },	{ 0.564811f, 0.718016f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.917443f, 0.012625f, 0.357200f },	{ 0.582600f, 0.694885f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.917443f, 0.012625f, -0.357200f },	{ 0.530565f, 0.694885f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.917443f, -0.044928f, -0.357200f },	{ 0.512777f, 0.718016f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.917443f, -0.044928f, 0.357200f },	{ 0.741787f, 0.718016f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ 0.917443f, 0.012625f, 0.357200f },	{ 0.759576f, 0.694885f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.917443f, 0.012625f, 0.357200f },	{ 0.625929f, 0.694885f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.917443f, -0.044928f, 0.357200f },	{ 0.608140f, 0.718016f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ 0.917443f, -0.044928f, -0.357200f },	{ 0.512777f, 0.718016f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.917443f, 0.012625f, -0.357200f },	{ 0.530565f, 0.694885f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.917443f, 0.012625f, 0.357200f },	{ 0.582600f, 0.694885f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.917443f, -0.044928f, 0.357200f },	{ 0.564811f, 0.718016f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.917443f, -0.044928f, -0.357200f },	{ 0.452449f, 0.718016f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.917443f, 0.012625f, -0.357200f },	{ 0.470237f, 0.694885f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.917443f, 0.012625f, -0.357200f },	{ 0.603884f, 0.694885f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.917443f, -0.044928f, -0.357200f },	{ 0.586096f, 0.718016f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
};
#define _Platform_2x1_Empty_vertices_
#endif
#ifndef _Platform_2x1_Empty_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Platform_2x1_Empty_indices[228] =
{
	 0, 1, 2,
	 3, 0, 2,
	 4, 5, 6,
	 7, 4, 6,
	 8, 9, 10,
	 11, 8, 10,
	 12, 13, 14,
	 15, 12, 14,
	 16, 17, 18,
	 19, 16, 18,
	 20, 21, 22,
	 23, 20, 22,
	 24, 25, 26,
	 27, 24, 26,
	 28, 29, 30,
	 31, 28, 30,
	 32, 33, 34,
	 35, 32, 34,
	 36, 37, 38,
	 39, 36, 38,
	 40, 41, 42,
	 43, 40, 42,
	 44, 45, 46,
	 47, 44, 46,
	 48, 49, 50,
	 51, 48, 50,
	 52, 53, 54,
	 55, 52, 54,
	 56, 57, 58,
	 59, 56, 58,
	 60, 61, 62,
	 63, 60, 62,
	 64, 65, 66,
	 67, 64, 66,
	 68, 69, 70,
	 71, 68, 70,
	 72, 73, 74,
	 75, 72, 74,
	 76, 77, 78,
	 79, 76, 78,
	 80, 81, 82,
	 83, 80, 82,
	 84, 85, 86,
	 87, 84, 86,
	 88, 89, 90,
	 91, 88, 90,
	 92, 93, 94,
	 95, 92, 94,
	 96, 97, 98,
	 99, 96, 98,
	 100, 101, 102,
	 103, 100, 102,
	 104, 105, 106,
	 107, 104, 106,
	 108, 109, 110,
	 111, 108, 110,
	 112, 113, 114,
	 115, 112, 114,
	 113, 104, 107,
	 114, 113, 107,
	 105, 112, 115,
	 106, 105, 115,
	 116, 117, 118,
	 119, 116, 118,
	 120, 121, 122,
	 123, 120, 122,
	 124, 125, 126,
	 127, 124, 126,
	 128, 129, 130,
	 131, 128, 130,
	 132, 133, 134,
	 135, 132, 134,
	 136, 137, 138,
	 139, 136, 138,
	 140, 141, 142,
	 143, 140, 142,
};
#define _Platform_2x1_Empty_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Platform_2x1_Empty_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Platform_2x1_Empty_materials[3] =
{
	{
		{{ 0.173351f, 0.173351f, 0.173351f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		225.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Grey",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
	{
		{{ 0.259796f, 0.259796f, 0.259796f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		225.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"LightGrey",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
	{
		{{ 0.800000f, 0.800000f, 0.800000f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		225.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Texture_Transparent",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Platform_2x1_Empty_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Platform_2x1_Empty_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Platform_2x1_Empty_batches[3][2] =
{
	{ 132, 0 },
	{ 72, 132 },
	{ 24, 204 },
};
#define _Platform_2x1_Empty_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Platform_2x1_Empty_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Platform_2x1_Empty_meshes[3] =
{
	{
		"default",
		132,
		0,
		0,
	},
	{
		"default",
		72,
		132,
		1,
	},
	{
		"default",
		24,
		204,
		2,
	},
};
#define _Platform_2x1_Empty_meshes_
#endif
