// "Rail_Long.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Rail_Long.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Rail_Long_version_
const char Rail_Long_version[4] = { '0','1','9','d' };
#define _Rail_Long_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Rail_Long_vertexcount_
const unsigned Rail_Long_vertexcount = 144;
#define _Rail_Long_vertexcount_
#endif
#ifndef _Rail_Long_indexcount_
const unsigned Rail_Long_indexcount = 768;
#define _Rail_Long_indexcount_
#endif
#ifndef _Rail_Long_materialcount_
const unsigned Rail_Long_materialcount = 1; // can be used for batched draws
#define _Rail_Long_materialcount_
#endif
#ifndef _Rail_Long_meshcount_
const unsigned Rail_Long_meshcount = 1;
#define _Rail_Long_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Rail_Long_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Rail_Long_vertices[144] =
{
	{	{ 0.000000f, 0.168421f, 0.000393f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, -1.000000f, -0.003500f }	},
	{	{ 0.989641f, 0.167533f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.005900f, -1.000000f, -0.001900f }	},
	{	{ 0.990310f, 0.174807f, 0.022431f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.002300f, -0.715600f, 0.698500f }	},
	{	{ 0.000000f, 0.175718f, 0.022747f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.709200f, 0.705000f }	},
	{	{ 1.081205f, 0.175707f, -0.023142f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.016300f, -0.724900f, -0.688700f }	},
	{	{ 1.089960f, 0.175158f, -0.023517f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.282300f, -0.582200f, -0.762500f }	},
	{	{ 1.085594f, 0.169898f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.364400f, -0.931200f, -0.000000f }	},
	{	{ 1.078857f, 0.169119f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.011000f, -0.999900f, 0.000000f }	},
	{	{ 0.990310f, 0.174807f, -0.022663f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.001900f, -0.714800f, -0.699400f }	},
	{	{ 1.081205f, 0.175707f, 0.022910f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.016300f, -0.724900f, 0.688700f }	},
	{	{ 1.089960f, 0.175158f, 0.023286f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.282300f, -0.582200f, 0.762500f }	},
	{	{ 1.129509f, 0.189823f, 0.021837f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.677900f, 0.334900f, 0.654500f }	},
	{	{ 1.136651f, 0.161475f, 0.021975f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.727000f, 0.110100f, 0.677800f }	},
	{	{ 1.143717f, 0.162606f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.987700f, 0.156100f, -0.000000f }	},
	{	{ 1.135498f, 0.192939f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.894700f, 0.446700f, 0.000000f }	},
	{	{ 1.120520f, 0.211980f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.607200f, 0.794600f, 0.000000f }	},
	{	{ 1.116154f, 0.206719f, 0.021791f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.457600f, 0.608200f, 0.648600f }	},
	{	{ 1.129509f, 0.189823f, -0.022069f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.677900f, 0.334900f, -0.654500f }	},
	{	{ 1.116154f, 0.206719f, -0.022023f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.457600f, 0.608200f, -0.648600f }	},
	{	{ 1.136651f, 0.161475f, -0.022206f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.727000f, 0.110100f, -0.677800f }	},
	{	{ 1.115453f, 0.158079f, -0.030085f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.030200f, 0.009500f, -0.999500f }	},
	{	{ 1.111546f, 0.180474f, -0.030242f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.075000f, 0.033100f, -0.996600f }	},
	{	{ 1.103057f, 0.190939f, -0.030321f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.055900f, 0.071500f, -0.995900f }	},
	{	{ 1.093581f, 0.171125f, -0.023352f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.602300f, -0.262200f, -0.754000f }	},
	{	{ 1.094255f, 0.154684f, -0.022979f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.715800f, -0.017300f, -0.698100f }	},
	{	{ 1.093581f, 0.171125f, 0.023121f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.602300f, -0.262200f, 0.754000f }	},
	{	{ 1.094255f, 0.154684f, 0.022747f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.715800f, -0.017300f, 0.698100f }	},
	{	{ 1.115453f, 0.158079f, 0.029853f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.030200f, 0.009500f, 0.999500f }	},
	{	{ 1.111546f, 0.180474f, 0.030010f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.075000f, 0.033100f, 0.996600f }	},
	{	{ 1.103058f, 0.190939f, 0.030090f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.056000f, 0.071500f, 0.995900f }	},
	{	{ 1.094168f, 0.116912f, 0.022495f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.708800f, 0.000600f, 0.705400f }	},
	{	{ 1.093700f, -0.008277f, 0.022304f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.707100f, 0.002100f, 0.707100f }	},
	{	{ 1.116171f, -0.008277f, 0.029777f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.003100f, 0.000000f, 1.000000f }	},
	{	{ 1.116522f, 0.117758f, 0.029792f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.010400f, 0.001700f, 0.999900f }	},
	{	{ 1.138876f, 0.118605f, 0.022134f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.715100f, 0.018600f, 0.698800f }	},
	{	{ 1.138642f, -0.008277f, 0.022304f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.707600f, -0.000900f, 0.706600f }	},
	{	{ 1.138876f, 0.118605f, -0.022366f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.715100f, 0.018600f, -0.698800f }	},
	{	{ 1.138642f, -0.008277f, -0.022536f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.707600f, -0.000900f, -0.706600f }	},
	{	{ 1.116171f, -0.008277f, -0.030009f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.003100f, 0.000000f, -1.000000f }	},
	{	{ 1.116522f, 0.117758f, -0.030023f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.010400f, 0.001700f, -0.999900f }	},
	{	{ 1.094168f, 0.116912f, -0.022727f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.708800f, 0.000700f, -0.705400f }	},
	{	{ 1.093700f, -0.008277f, -0.022536f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.707100f, 0.002100f, -0.707100f }	},
	{	{ 1.146132f, -0.008277f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, -0.001500f, 0.000000f }	},
	{	{ 1.146327f, 0.118887f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.999600f, 0.027500f, -0.000000f }	},
	{	{ 1.086209f, -0.008277f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.003600f, 0.000000f }	},
	{	{ 1.086717f, 0.116629f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.005000f, 0.000000f }	},
	{	{ 1.087189f, 0.153552f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, -0.002600f, -0.000000f }	},
	{	{ 1.088247f, 0.195471f, 0.029918f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.010100f, 0.047500f, 0.998800f }	},
	{	{ 0.992317f, 0.196629f, 0.029714f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.001200f, 0.009300f, 1.000000f }	},
	{	{ 1.095290f, 0.215235f, 0.021908f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.156300f, 0.733000f, 0.662100f }	},
	{	{ 0.994324f, 0.218450f, 0.022082f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.012500f, 0.720300f, 0.693600f }	},
	{	{ 1.097638f, 0.221822f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.219400f, 0.975600f, -0.000000f }	},
	{	{ 0.994992f, 0.225723f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.019100f, 0.999800f, -0.001800f }	},
	{	{ 1.095290f, 0.215234f, -0.022140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.156300f, 0.733000f, -0.662100f }	},
	{	{ 0.994324f, 0.218450f, -0.022314f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.012100f, 0.719400f, -0.694500f }	},
	{	{ 1.088247f, 0.195471f, -0.030149f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.010100f, 0.047500f, -0.998800f }	},
	{	{ 0.992317f, 0.196629f, -0.029946f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000600f, 0.009400f, -1.000000f }	},
	{	{ 1.087594f, 0.168009f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.927400f, -0.374000f, -0.000000f }	},
	{	{ -0.000000f, 0.176079f, -0.021961f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, -0.707600f, -0.706600f }	},
	{	{ 0.000000f, 0.198329f, 0.030198f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.003900f, 1.000000f }	},
	{	{ -0.000000f, 0.198329f, -0.029412f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, 0.003900f, -1.000000f }	},
	{	{ 0.000000f, 0.220940f, 0.022747f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.711300f, 0.702900f }	},
	{	{ 0.000000f, 0.228236f, 0.000393f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, 1.000000f, -0.003500f }	},
	{	{ -0.000000f, 0.220579f, -0.021961f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, 0.709700f, -0.704500f }	},
	{	{ 0.000000f, 0.105496f, 0.000707f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, 0.005000f }	},
	{	{ 1.104111f, 0.104609f, -0.000049f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000900f, -1.000000f, 0.004600f }	},
	{	{ 1.104111f, 0.105598f, 0.002316f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000200f, -0.611300f, 0.791400f }	},
	{	{ 0.000000f, 0.106316f, 0.002400f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.611100f, 0.791600f }	},
	{	{ -0.000000f, 0.106548f, -0.001465f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, -0.618500f, -0.785800f }	},
	{	{ 1.104111f, 0.105572f, -0.002515f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.001100f, -0.618500f, -0.785800f }	},
	{	{ 1.104111f, 0.117115f, 0.004108f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000400f, 0.004900f, 1.000000f }	},
	{	{ 0.000000f, 0.118894f, 0.004592f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.005300f, 1.000000f }	},
	{	{ -0.000000f, 0.118893f, -0.003810f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, 0.005300f, -1.000000f }	},
	{	{ 1.104111f, 0.117114f, -0.004340f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000600f, 0.005000f, -1.000000f }	},
	{	{ 0.000000f, 0.131504f, 0.002419f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.600000f, 0.800000f }	},
	{	{ 1.104111f, 0.128806f, 0.002007f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.001700f, 0.599200f, 0.800600f }	},
	{	{ 1.104111f, 0.129830f, -0.000049f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.002300f, 1.000000f, 0.007700f }	},
	{	{ 0.000000f, 0.132340f, 0.000711f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, 0.008100f }	},
	{	{ -0.000000f, 0.131271f, -0.001483f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000000f, 0.609900f, -0.792500f }	},
	{	{ 1.104111f, 0.128835f, -0.002203f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000900f, 0.608900f, -0.793200f }	},
	{	{ -0.990310f, 0.174807f, 0.022432f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.002300f, -0.715600f, 0.698500f }	},
	{	{ -0.989641f, 0.167533f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.005900f, -1.000000f, -0.001900f }	},
	{	{ -1.085594f, 0.169898f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.364400f, -0.931200f, -0.000000f }	},
	{	{ -1.089960f, 0.175158f, -0.023517f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.282300f, -0.582200f, -0.762500f }	},
	{	{ -1.081205f, 0.175707f, -0.023142f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.016300f, -0.724900f, -0.688700f }	},
	{	{ -1.078857f, 0.169119f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.011000f, -0.999900f, 0.000000f }	},
	{	{ -0.990310f, 0.174807f, -0.022663f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.001900f, -0.714800f, -0.699400f }	},
	{	{ -1.081205f, 0.175707f, 0.022910f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.016300f, -0.724900f, 0.688700f }	},
	{	{ -1.089960f, 0.175158f, 0.023286f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.282300f, -0.582200f, 0.762500f }	},
	{	{ -1.143717f, 0.162606f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.987700f, 0.156100f, -0.000000f }	},
	{	{ -1.136651f, 0.161475f, 0.021975f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.727000f, 0.110100f, 0.677800f }	},
	{	{ -1.129509f, 0.189823f, 0.021837f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.677900f, 0.334900f, 0.654500f }	},
	{	{ -1.135498f, 0.192939f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.894700f, 0.446700f, 0.000000f }	},
	{	{ -1.116154f, 0.206719f, 0.021791f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.457600f, 0.608200f, 0.648600f }	},
	{	{ -1.120520f, 0.211980f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.607200f, 0.794600f, 0.000000f }	},
	{	{ -1.116154f, 0.206719f, -0.022023f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.457600f, 0.608200f, -0.648600f }	},
	{	{ -1.129509f, 0.189823f, -0.022068f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.677900f, 0.334900f, -0.654500f }	},
	{	{ -1.136651f, 0.161475f, -0.022206f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.727000f, 0.110100f, -0.677800f }	},
	{	{ -1.115453f, 0.158079f, -0.030085f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.030200f, 0.009500f, -0.999500f }	},
	{	{ -1.111546f, 0.180474f, -0.030242f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.075000f, 0.033100f, -0.996600f }	},
	{	{ -1.103057f, 0.190939f, -0.030321f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.055900f, 0.071500f, -0.995900f }	},
	{	{ -1.093581f, 0.171125f, -0.023352f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.602300f, -0.262200f, -0.754000f }	},
	{	{ -1.094255f, 0.154684f, -0.022979f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.715800f, -0.017300f, -0.698100f }	},
	{	{ -1.115453f, 0.158079f, 0.029853f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.030200f, 0.009500f, 0.999500f }	},
	{	{ -1.094255f, 0.154684f, 0.022747f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.715800f, -0.017300f, 0.698100f }	},
	{	{ -1.093581f, 0.171125f, 0.023121f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.602300f, -0.262200f, 0.754000f }	},
	{	{ -1.111546f, 0.180474f, 0.030011f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.075000f, 0.033100f, 0.996600f }	},
	{	{ -1.103058f, 0.190939f, 0.030090f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.056000f, 0.071500f, 0.995900f }	},
	{	{ -1.116171f, -0.008277f, 0.029777f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.003100f, 0.000000f, 1.000000f }	},
	{	{ -1.093700f, -0.008277f, 0.022304f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.707100f, 0.002100f, 0.707100f }	},
	{	{ -1.094168f, 0.116912f, 0.022495f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.708800f, 0.000600f, 0.705400f }	},
	{	{ -1.116522f, 0.117758f, 0.029792f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.010400f, 0.001700f, 0.999900f }	},
	{	{ -1.138876f, 0.118605f, 0.022134f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.715100f, 0.018600f, 0.698800f }	},
	{	{ -1.138642f, -0.008277f, 0.022304f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.707600f, -0.000900f, 0.706600f }	},
	{	{ -1.116171f, -0.008277f, -0.030009f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.003100f, 0.000000f, -1.000000f }	},
	{	{ -1.138642f, -0.008277f, -0.022536f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.707600f, -0.000900f, -0.706600f }	},
	{	{ -1.138876f, 0.118605f, -0.022366f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.715100f, 0.018600f, -0.698800f }	},
	{	{ -1.116522f, 0.117758f, -0.030023f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.010400f, 0.001700f, -0.999900f }	},
	{	{ -1.094168f, 0.116912f, -0.022727f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.708800f, 0.000700f, -0.705400f }	},
	{	{ -1.093700f, -0.008277f, -0.022536f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.707100f, 0.002100f, -0.707100f }	},
	{	{ -1.146132f, -0.008277f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, -0.001500f, 0.000000f }	},
	{	{ -1.146327f, 0.118887f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.999600f, 0.027500f, -0.000000f }	},
	{	{ -1.086209f, -0.008277f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.003600f, 0.000000f }	},
	{	{ -1.086717f, 0.116629f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.005000f, 0.000000f }	},
	{	{ -1.087189f, 0.153552f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, -0.002600f, -0.000000f }	},
	{	{ -1.088247f, 0.195471f, 0.029918f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.010100f, 0.047500f, 0.998800f }	},
	{	{ -0.992317f, 0.196629f, 0.029714f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.001200f, 0.009300f, 1.000000f }	},
	{	{ -0.994324f, 0.218450f, 0.022082f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.012500f, 0.720300f, 0.693600f }	},
	{	{ -1.095290f, 0.215235f, 0.021908f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.156300f, 0.733000f, 0.662100f }	},
	{	{ -1.097638f, 0.221822f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.219400f, 0.975600f, -0.000000f }	},
	{	{ -0.994992f, 0.225723f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.019100f, 0.999800f, -0.001800f }	},
	{	{ -0.994324f, 0.218450f, -0.022314f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.012100f, 0.719400f, -0.694500f }	},
	{	{ -1.095290f, 0.215234f, -0.022140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.156300f, 0.733000f, -0.662100f }	},
	{	{ -1.088247f, 0.195471f, -0.030149f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.010100f, 0.047500f, -0.998800f }	},
	{	{ -0.992317f, 0.196629f, -0.029946f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000600f, 0.009400f, -1.000000f }	},
	{	{ -1.087594f, 0.168009f, -0.000116f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.927400f, -0.374000f, -0.000000f }	},
	{	{ -1.104111f, 0.105598f, 0.002316f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000200f, -0.611300f, 0.791400f }	},
	{	{ -1.104111f, 0.104609f, -0.000049f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000900f, -1.000000f, 0.004600f }	},
	{	{ -1.104111f, 0.105572f, -0.002515f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.001100f, -0.618500f, -0.785800f }	},
	{	{ -1.104111f, 0.117115f, 0.004108f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000400f, 0.004900f, 1.000000f }	},
	{	{ -1.104111f, 0.117114f, -0.004339f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000600f, 0.005000f, -1.000000f }	},
	{	{ -1.104111f, 0.129830f, -0.000049f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.002300f, 1.000000f, 0.007700f }	},
	{	{ -1.104111f, 0.128806f, 0.002008f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.001700f, 0.599200f, 0.800600f }	},
	{	{ -1.104111f, 0.128835f, -0.002203f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.000900f, 0.608900f, -0.793200f }	},
};
#define _Rail_Long_vertices_
#endif
#ifndef _Rail_Long_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Rail_Long_indices[768] =
{
	 0, 1, 2,
	 3, 0, 2,
	 4, 5, 6,
	 7, 4, 6,
	 1, 8, 4,
	 7, 1, 4,
	 9, 2, 1,
	 7, 9, 1,
	 6, 10, 9,
	 7, 6, 9,
	 11, 12, 13,
	 14, 11, 13,
	 15, 16, 11,
	 14, 15, 11,
	 17, 18, 15,
	 14, 17, 15,
	 13, 19, 17,
	 14, 13, 17,
	 17, 19, 20,
	 21, 17, 20,
	 22, 18, 17,
	 21, 22, 17,
	 23, 5, 22,
	 21, 23, 22,
	 20, 24, 23,
	 21, 20, 23,
	 25, 26, 27,
	 28, 25, 27,
	 29, 10, 25,
	 28, 29, 25,
	 11, 16, 29,
	 28, 11, 29,
	 27, 12, 11,
	 28, 27, 11,
	 30, 31, 32,
	 33, 30, 32,
	 27, 26, 30,
	 33, 27, 30,
	 34, 12, 27,
	 33, 34, 27,
	 32, 35, 34,
	 33, 32, 34,
	 36, 37, 38,
	 39, 36, 38,
	 20, 19, 36,
	 39, 20, 36,
	 40, 24, 20,
	 39, 40, 20,
	 38, 41, 40,
	 39, 38, 40,
	 34, 35, 42,
	 43, 34, 42,
	 13, 12, 34,
	 43, 13, 34,
	 36, 19, 13,
	 43, 36, 13,
	 42, 37, 36,
	 43, 42, 36,
	 40, 41, 44,
	 45, 40, 44,
	 46, 24, 40,
	 45, 46, 40,
	 30, 26, 46,
	 45, 30, 46,
	 44, 31, 30,
	 45, 44, 30,
	 9, 10, 29,
	 47, 9, 29,
	 48, 2, 9,
	 47, 48, 9,
	 49, 50, 48,
	 47, 49, 48,
	 29, 16, 49,
	 47, 29, 49,
	 49, 16, 15,
	 51, 49, 15,
	 52, 50, 49,
	 51, 52, 49,
	 53, 54, 52,
	 51, 53, 52,
	 15, 18, 53,
	 51, 15, 53,
	 53, 18, 22,
	 55, 53, 22,
	 56, 54, 53,
	 55, 56, 53,
	 4, 8, 56,
	 55, 4, 56,
	 22, 5, 4,
	 55, 22, 4,
	 23, 24, 46,
	 57, 23, 46,
	 6, 5, 23,
	 57, 6, 23,
	 25, 10, 6,
	 57, 25, 6,
	 46, 26, 25,
	 57, 46, 25,
	 58, 8, 1,
	 0, 58, 1,
	 3, 2, 48,
	 59, 3, 48,
	 60, 56, 8,
	 58, 60, 8,
	 61, 50, 52,
	 62, 61, 52,
	 59, 48, 50,
	 61, 59, 50,
	 63, 54, 56,
	 60, 63, 56,
	 62, 52, 54,
	 63, 62, 54,
	 64, 65, 66,
	 67, 64, 66,
	 68, 69, 65,
	 64, 68, 65,
	 67, 66, 70,
	 71, 67, 70,
	 72, 73, 69,
	 68, 72, 69,
	 74, 75, 76,
	 77, 74, 76,
	 71, 70, 75,
	 74, 71, 75,
	 78, 79, 73,
	 72, 78, 73,
	 77, 76, 79,
	 78, 77, 79,
	 80, 81, 0,
	 3, 80, 0,
	 82, 83, 84,
	 85, 82, 84,
	 84, 86, 81,
	 85, 84, 81,
	 81, 80, 87,
	 85, 81, 87,
	 87, 88, 82,
	 85, 87, 82,
	 89, 90, 91,
	 92, 89, 91,
	 91, 93, 94,
	 92, 91, 94,
	 94, 95, 96,
	 92, 94, 96,
	 96, 97, 89,
	 92, 96, 89,
	 98, 97, 96,
	 99, 98, 96,
	 96, 95, 100,
	 99, 96, 100,
	 100, 83, 101,
	 99, 100, 101,
	 101, 102, 98,
	 99, 101, 98,
	 103, 104, 105,
	 106, 103, 105,
	 105, 88, 107,
	 106, 105, 107,
	 107, 93, 91,
	 106, 107, 91,
	 91, 90, 103,
	 106, 91, 103,
	 108, 109, 110,
	 111, 108, 110,
	 110, 104, 103,
	 111, 110, 103,
	 103, 90, 112,
	 111, 103, 112,
	 112, 113, 108,
	 111, 112, 108,
	 114, 115, 116,
	 117, 114, 116,
	 116, 97, 98,
	 117, 116, 98,
	 98, 102, 118,
	 117, 98, 118,
	 118, 119, 114,
	 117, 118, 114,
	 120, 113, 112,
	 121, 120, 112,
	 112, 90, 89,
	 121, 112, 89,
	 89, 97, 116,
	 121, 89, 116,
	 116, 115, 120,
	 121, 116, 120,
	 122, 119, 118,
	 123, 122, 118,
	 118, 102, 124,
	 123, 118, 124,
	 124, 104, 110,
	 123, 124, 110,
	 110, 109, 122,
	 123, 110, 122,
	 107, 88, 87,
	 125, 107, 87,
	 87, 80, 126,
	 125, 87, 126,
	 126, 127, 128,
	 125, 126, 128,
	 128, 93, 107,
	 125, 128, 107,
	 94, 93, 128,
	 129, 94, 128,
	 128, 127, 130,
	 129, 128, 130,
	 130, 131, 132,
	 129, 130, 132,
	 132, 95, 94,
	 129, 132, 94,
	 100, 95, 132,
	 133, 100, 132,
	 132, 131, 134,
	 133, 132, 134,
	 134, 86, 84,
	 133, 134, 84,
	 84, 83, 100,
	 133, 84, 100,
	 124, 102, 101,
	 135, 124, 101,
	 101, 83, 82,
	 135, 101, 82,
	 82, 88, 105,
	 135, 82, 105,
	 105, 104, 124,
	 135, 105, 124,
	 81, 86, 58,
	 0, 81, 58,
	 126, 80, 3,
	 59, 126, 3,
	 86, 134, 60,
	 58, 86, 60,
	 130, 127, 61,
	 62, 130, 61,
	 127, 126, 59,
	 61, 127, 59,
	 134, 131, 63,
	 60, 134, 63,
	 131, 130, 62,
	 63, 131, 62,
	 136, 137, 64,
	 67, 136, 64,
	 137, 138, 68,
	 64, 137, 68,
	 139, 136, 67,
	 71, 139, 67,
	 138, 140, 72,
	 68, 138, 72,
	 141, 142, 74,
	 77, 141, 74,
	 142, 139, 71,
	 74, 142, 71,
	 140, 143, 78,
	 72, 140, 78,
	 143, 141, 77,
	 78, 143, 77,
};
#define _Rail_Long_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Rail_Long_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Rail_Long_materials[1] =
{
	{
		{{ 0.027209f, 0.027209f, 0.027209f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		225.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Black",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Rail_Long_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Rail_Long_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Rail_Long_batches[1][2] =
{
	{ 768, 0 },
};
#define _Rail_Long_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Rail_Long_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Rail_Long_meshes[1] =
{
	{
		"default",
		768,
		0,
		0,
	},
};
#define _Rail_Long_meshes_
#endif
