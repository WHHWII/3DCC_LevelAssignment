// "Sign_Corner_Small1_Plane.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Sign_Corner_Small1_Plane.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Sign_Corner_Small1_Plane_version_
const char Sign_Corner_Small1_Plane_version[4] = { '0','1','9','d' };
#define _Sign_Corner_Small1_Plane_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Sign_Corner_Small1_Plane_vertexcount_
const unsigned Sign_Corner_Small1_Plane_vertexcount = 144;
#define _Sign_Corner_Small1_Plane_vertexcount_
#endif
#ifndef _Sign_Corner_Small1_Plane_indexcount_
const unsigned Sign_Corner_Small1_Plane_indexcount = 372;
#define _Sign_Corner_Small1_Plane_indexcount_
#endif
#ifndef _Sign_Corner_Small1_Plane_materialcount_
const unsigned Sign_Corner_Small1_Plane_materialcount = 2; // can be used for batched draws
#define _Sign_Corner_Small1_Plane_materialcount_
#endif
#ifndef _Sign_Corner_Small1_Plane_meshcount_
const unsigned Sign_Corner_Small1_Plane_meshcount = 2;
#define _Sign_Corner_Small1_Plane_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Sign_Corner_Small1_Plane_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Sign_Corner_Small1_Plane_vertices[144] =
{
	{	{ -0.132326f, -0.305717f, 0.101359f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.102200f, 0.989000f, -0.107400f }	},
	{	{ -0.052642f, -0.320107f, 0.044658f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.105900f, 0.989100f, -0.102200f }	},
	{	{ -0.144778f, -0.320107f, -0.016905f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.071000f, 0.986400f, -0.148500f }	},
	{	{ -0.144778f, 0.320107f, -0.016905f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.071000f, -0.986400f, -0.148500f }	},
	{	{ -0.052642f, 0.320107f, 0.044658f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.105900f, -0.989100f, -0.102200f }	},
	{	{ -0.132326f, 0.305717f, 0.101359f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.102200f, -0.989000f, -0.107400f }	},
	{	{ -0.495769f, -0.305717f, 0.021917f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.999300f, 0.000000f, 0.037100f }	},
	{	{ -0.493527f, -0.320107f, -0.038523f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.999300f, 0.000000f, 0.037100f }	},
	{	{ -0.493527f, 0.320107f, -0.038523f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.999300f, 0.000000f, 0.037100f }	},
	{	{ -0.220320f, -0.305717f, 0.042563f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.055100f, 0.984200f, -0.168100f }	},
	{	{ -0.253460f, -0.320107f, -0.038523f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.028500f, 0.979400f, -0.199900f }	},
	{	{ -0.052884f, 0.305717f, 0.528303f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.007700f, 0.000000f, -1.000000f }	},
	{	{ 0.030539f, 0.320107f, 0.527664f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.007700f, 0.000000f, -1.000000f }	},
	{	{ 0.030539f, -0.320107f, 0.527664f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.007700f, 0.000000f, -1.000000f }	},
	{	{ -0.253460f, 0.320107f, -0.038523f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.028500f, -0.979400f, -0.199900f }	},
	{	{ -0.220320f, 0.305717f, 0.042563f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.055100f, -0.984200f, -0.168100f }	},
	{	{ 0.030539f, -0.320107f, 0.245476f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.159100f, 0.987100f, -0.019500f }	},
	{	{ 0.008921f, -0.320107f, 0.136794f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.135100f, 0.989100f, -0.058900f }	},
	{	{ -0.073530f, -0.305717f, 0.189353f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.138700f, 0.988900f, -0.053200f }	},
	{	{ -0.052884f, 0.305717f, 0.293149f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.163600f, -0.986500f, -0.011400f }	},
	{	{ 0.030539f, 0.320107f, 0.245476f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.159100f, -0.987100f, -0.019500f }	},
	{	{ 0.030539f, 0.320107f, 0.527664f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.170000f, -0.985400f, -0.000000f }	},
	{	{ -0.073530f, 0.305717f, 0.189353f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.138700f, -0.988900f, -0.053200f }	},
	{	{ 0.008921f, 0.320107f, 0.136794f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.135100f, -0.989100f, -0.058900f }	},
	{	{ 0.030539f, -0.320107f, 0.527664f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.170000f, 0.985400f, -0.000000f }	},
	{	{ -0.052884f, -0.305717f, 0.293149f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.163600f, 0.986500f, -0.011400f }	},
	{	{ -0.324116f, -0.305717f, 0.021917f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.010300f, 0.975400f, -0.220200f }	},
	{	{ -0.493527f, -0.320107f, -0.038523f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.972800f, -0.231600f }	},
	{	{ -0.493527f, 0.320107f, -0.038523f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.972800f, -0.231600f }	},
	{	{ -0.324116f, 0.305717f, 0.021917f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.010300f, -0.975400f, -0.220200f }	},
	{	{ -0.148753f, -0.363452f, -0.008590f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.058569f, -0.363452f, 0.050384f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.138046f, -0.363452f, 0.107373f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.148753f, 0.363452f, -0.008590f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.223406f, 0.363452f, 0.051978f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.138046f, 0.363452f, 0.107373f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.529475f, 0.363452f, -0.029844f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.988200f, 0.000000f, -0.153500f }	},
	{	{ -0.529475f, -0.363452f, -0.029844f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.988200f, 0.000000f, -0.153500f }	},
	{	{ -0.538577f, -0.363452f, 0.028768f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.988200f, 0.000000f, -0.153500f }	},
	{	{ -0.255054f, -0.363452f, -0.027330f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.223406f, -0.363452f, 0.051978f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.023699f, -0.363452f, 0.564846f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.062300f, 0.000000f, 0.998100f }	},
	{	{ 0.023699f, 0.363452f, 0.564845f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.062300f, 0.000000f, 0.998100f }	},
	{	{ -0.058925f, 0.363452f, 0.570002f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.062300f, 0.000000f, 0.998100f }	},
	{	{ -0.255054f, 0.363452f, -0.027330f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.324693f, 0.363452f, 0.034244f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.021630f, -0.363452f, 0.246568f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.062046f, -0.363452f, 0.293788f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.081294f, -0.363452f, 0.192332f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.023699f, 0.363452f, 0.564845f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.021630f, 0.363452f, 0.246568f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.062046f, 0.363452f, 0.293788f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.001357f, 0.363452f, 0.140089f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.081294f, 0.363452f, 0.192331f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.023699f, -0.363452f, 0.564846f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.058925f, -0.363452f, 0.570002f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.001357f, -0.363452f, 0.140089f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.529475f, -0.363452f, -0.029844f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.324693f, -0.363452f, 0.034244f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.058569f, 0.363452f, 0.050384f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.529475f, 0.363452f, -0.029844f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.538577f, 0.363452f, 0.028768f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.493527f, 0.320107f, -0.038523f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.119500f, 0.100900f, -0.987700f }	},
	{	{ -0.493527f, -0.320107f, -0.038523f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.119500f, -0.100900f, -0.987700f }	},
	{	{ -0.529475f, -0.363452f, -0.029844f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.100100f, -0.114900f, -0.988300f }	},
	{	{ 0.030539f, 0.320107f, 0.527664f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.992600f, 0.080000f, 0.091200f }	},
	{	{ 0.023699f, 0.363452f, 0.564845f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.992900f, 0.089000f, 0.078900f }	},
	{	{ 0.023699f, -0.363452f, 0.564846f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.992900f, -0.089000f, 0.078900f }	},
	{	{ 0.030539f, -0.320107f, 0.245476f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.975300f, -0.200300f, -0.093300f }	},
	{	{ 0.021630f, -0.363452f, 0.246568f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.975300f, -0.200700f, -0.092000f }	},
	{	{ 0.001357f, -0.363452f, 0.140089f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.907700f, -0.189400f, -0.374400f }	},
	{	{ 0.030539f, 0.320107f, 0.245476f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.975300f, 0.200300f, -0.093300f }	},
	{	{ 0.008921f, 0.320107f, 0.136794f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.907500f, 0.186900f, -0.376300f }	},
	{	{ 0.001357f, 0.363452f, 0.140089f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.907700f, 0.189400f, -0.374400f }	},
	{	{ 0.008921f, -0.320107f, 0.136794f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.907500f, -0.186900f, -0.376300f }	},
	{	{ -0.058569f, -0.363452f, 0.050384f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.693200f, -0.189700f, -0.695400f }	},
	{	{ -0.052642f, 0.320107f, 0.044658f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.694900f, 0.186800f, -0.694400f }	},
	{	{ -0.058569f, 0.363452f, 0.050384f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.693200f, 0.189700f, -0.695400f }	},
	{	{ -0.144778f, -0.320107f, -0.016905f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.372500f, -0.204700f, -0.905200f }	},
	{	{ -0.052642f, -0.320107f, 0.044658f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.694900f, -0.186800f, -0.694400f }	},
	{	{ -0.144778f, 0.320107f, -0.016905f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.372500f, 0.204700f, -0.905200f }	},
	{	{ -0.148753f, 0.363452f, -0.008590f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.365600f, 0.214000f, -0.905900f }	},
	{	{ -0.253460f, -0.320107f, -0.038523f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.087800f, -0.245800f, -0.965300f }	},
	{	{ -0.148753f, -0.363452f, -0.008590f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.365600f, -0.214000f, -0.905900f }	},
	{	{ -0.253460f, 0.320107f, -0.038523f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.087800f, 0.245800f, -0.965300f }	},
	{	{ -0.255054f, 0.363452f, -0.027330f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.084200f, 0.249300f, -0.964800f }	},
	{	{ 0.021630f, 0.363452f, 0.246568f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.975300f, 0.200700f, -0.092000f }	},
	{	{ 0.030539f, -0.320107f, 0.527664f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.992600f, -0.080000f, 0.091200f }	},
	{	{ -0.255054f, -0.363452f, -0.027330f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.084200f, -0.249300f, -0.964800f }	},
	{	{ -0.529475f, 0.363452f, -0.029844f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.100100f, 0.114900f, -0.988300f }	},
	{	{ -0.495769f, -0.305717f, 0.021917f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.074300f, 0.069500f, 0.994800f }	},
	{	{ -0.495769f, 0.305717f, 0.021917f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.074300f, -0.069500f, 0.994800f }	},
	{	{ -0.538577f, 0.363452f, 0.028768f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.049500f, -0.081400f, 0.995500f }	},
	{	{ -0.052884f, 0.305717f, 0.528303f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.995900f, -0.054800f, -0.072200f }	},
	{	{ -0.052884f, -0.305717f, 0.528303f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.995900f, 0.054800f, -0.072200f }	},
	{	{ -0.058925f, -0.363452f, 0.570002f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.996400f, 0.067600f, -0.050700f }	},
	{	{ -0.052884f, -0.305717f, 0.293149f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.983500f, 0.154500f, 0.093700f }	},
	{	{ -0.073530f, -0.305717f, 0.189353f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.914600f, 0.142500f, 0.378400f }	},
	{	{ -0.081294f, -0.363452f, 0.192332f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.914500f, 0.145000f, 0.377800f }	},
	{	{ -0.052884f, 0.305717f, 0.293149f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.983500f, -0.154500f, 0.093700f }	},
	{	{ -0.062046f, 0.363452f, 0.293788f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.983700f, -0.153600f, 0.093600f }	},
	{	{ -0.081294f, 0.363452f, 0.192331f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.914500f, -0.145000f, 0.377800f }	},
	{	{ -0.132326f, -0.305717f, 0.101359f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.696200f, 0.146200f, 0.702800f }	},
	{	{ -0.138046f, -0.363452f, 0.107373f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.695500f, 0.142300f, 0.704300f }	},
	{	{ -0.132326f, 0.305717f, 0.101359f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.696200f, -0.146200f, 0.702800f }	},
	{	{ -0.073530f, 0.305717f, 0.189353f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.914600f, -0.142500f, 0.378400f }	},
	{	{ -0.220320f, -0.305717f, 0.042563f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.368500f, 0.175400f, 0.912900f }	},
	{	{ -0.223406f, -0.363452f, 0.051978f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.366300f, 0.164900f, 0.915800f }	},
	{	{ -0.138046f, 0.363452f, 0.107373f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.695500f, -0.142300f, 0.704300f }	},
	{	{ -0.223406f, 0.363452f, 0.051978f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.366300f, -0.164900f, 0.915800f }	},
	{	{ -0.324116f, -0.305717f, 0.021917f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.095200f, 0.208800f, 0.973300f }	},
	{	{ -0.324693f, -0.363452f, 0.034244f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.095800f, 0.194800f, 0.976200f }	},
	{	{ -0.220320f, 0.305717f, 0.042563f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.368500f, -0.175400f, 0.912900f }	},
	{	{ -0.324693f, 0.363452f, 0.034244f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.095800f, -0.194800f, 0.976200f }	},
	{	{ -0.058925f, 0.363452f, 0.570002f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.996400f, -0.067600f, -0.050700f }	},
	{	{ -0.062046f, -0.363452f, 0.293788f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.983700f, 0.153600f, 0.093600f }	},
	{	{ -0.538577f, -0.363452f, 0.028768f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.049500f, 0.081400f, 0.995500f }	},
	{	{ -0.324116f, 0.305717f, 0.021917f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.095200f, -0.208800f, 0.973300f }	},
	{	{ -0.495769f, 0.305717f, 0.021917f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.999300f, 0.000000f, 0.037100f }	},
	{	{ -0.052884f, -0.305717f, 0.528303f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.007700f, 0.000000f, -1.000000f }	},
	{	{ -0.052884f, 0.305717f, 0.528303f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.170000f, -0.985400f, -0.000000f }	},
	{	{ -0.052884f, -0.305717f, 0.528303f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.170000f, 0.985400f, -0.000000f }	},
	{	{ -0.495769f, -0.305717f, 0.021917f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.972800f, -0.231600f }	},
	{	{ -0.495769f, 0.305717f, 0.021917f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.972800f, -0.231600f }	},
	{	{ -0.538577f, 0.363452f, 0.028768f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.988200f, 0.000000f, -0.153500f }	},
	{	{ -0.058925f, -0.363452f, 0.570002f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.062300f, 0.000000f, 0.998100f }	},
	{	{ -0.058925f, 0.363452f, 0.570002f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.538577f, -0.363452f, 0.028768f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.272166f, -0.311540f, -0.005789f },	{ 0.645467f, 0.842841f, 0.000000f },	{ 0.098000f, -0.000000f, -0.995200f }	},
	{	{ -0.491804f, -0.311540f, -0.005789f },	{ 0.608048f, 0.842841f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.491804f, 0.311539f, -0.005790f },	{ 0.608048f, 0.746829f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.004231f, 0.311539f, 0.270608f },	{ 0.611493f, 0.749501f, 0.000000f },	{ 0.995200f, 0.000000f, -0.098000f }	},
	{	{ 0.004231f, -0.311540f, 0.270608f },	{ 0.611493f, 0.753904f, 0.000000f },	{ 0.995200f, 0.000000f, -0.098000f }	},
	{	{ -0.016808f, -0.311540f, 0.164835f },	{ 0.610939f, 0.753904f, 0.000000f },	{ 0.923900f, 0.000000f, -0.382700f }	},
	{	{ -0.016808f, 0.311539f, 0.164835f },	{ 0.700586f, 0.746829f, 0.000000f },	{ 0.923900f, 0.000000f, -0.382700f }	},
	{	{ -0.016808f, -0.311540f, 0.164835f },	{ 0.700586f, 0.842841f, 0.000000f },	{ 0.923900f, 0.000000f, -0.382700f }	},
	{	{ -0.076724f, -0.311540f, 0.075166f },	{ 0.682213f, 0.842841f, 0.000000f },	{ 0.707100f, -0.000000f, -0.707100f }	},
	{	{ -0.076724f, 0.311539f, 0.075165f },	{ 0.682213f, 0.746829f, 0.000000f },	{ 0.707100f, -0.000000f, -0.707100f }	},
	{	{ -0.166393f, -0.311540f, 0.015250f },	{ 0.663840f, 0.842841f, 0.000000f },	{ 0.382700f, -0.000000f, -0.923900f }	},
	{	{ -0.166393f, 0.311539f, 0.015250f },	{ 0.663840f, 0.746829f, 0.000000f },	{ 0.382700f, -0.000000f, -0.923900f }	},
	{	{ 0.004231f, 0.311539f, 0.516483f },	{ 0.612757f, 0.749501f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.272166f, 0.311539f, -0.005790f },	{ 0.645467f, 0.746829f, 0.000000f },	{ 0.098000f, -0.000000f, -0.995200f }	},
	{	{ -0.016808f, 0.311539f, 0.164835f },	{ 0.610939f, 0.749501f, 0.000000f },	{ 0.923900f, 0.000000f, -0.382700f }	},
	{	{ 0.004231f, -0.311540f, 0.516483f },	{ 0.612757f, 0.753904f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
};
#define _Sign_Corner_Small1_Plane_vertices_
#endif
#ifndef _Sign_Corner_Small1_Plane_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Sign_Corner_Small1_Plane_indices[372] =
{
	 0, 1, 2,
	 3, 4, 5,
	 6, 7, 8,
	 9, 2, 10,
	 11, 12, 13,
	 14, 3, 15,
	 16, 17, 18,
	 19, 20, 21,
	 22, 23, 20,
	 24, 16, 25,
	 17, 1, 0,
	 26, 10, 27,
	 5, 4, 23,
	 28, 14, 29,
	 30, 31, 32,
	 33, 34, 35,
	 36, 37, 38,
	 39, 30, 40,
	 41, 42, 43,
	 44, 45, 34,
	 46, 47, 48,
	 49, 50, 51,
	 50, 52, 53,
	 54, 55, 47,
	 56, 48, 32,
	 57, 39, 58,
	 52, 59, 35,
	 60, 61, 45,
	 62, 63, 64,
	 65, 66, 67,
	 68, 69, 70,
	 71, 72, 73,
	 74, 70, 75,
	 72, 76, 77,
	 78, 79, 75,
	 80, 81, 77,
	 82, 78, 83,
	 84, 85, 81,
	 65, 71, 86,
	 87, 67, 69,
	 63, 82, 88,
	 62, 89, 85,
	 90, 91, 92,
	 93, 94, 95,
	 96, 97, 98,
	 99, 100, 101,
	 102, 103, 98,
	 104, 105, 101,
	 102, 106, 107,
	 104, 108, 109,
	 106, 110, 111,
	 112, 109, 113,
	 93, 114, 100,
	 94, 96, 115,
	 90, 116, 111,
	 91, 117, 113,
	 0, 2, 9,
	 3, 5, 15,
	 6, 8, 118,
	 9, 10, 26,
	 11, 13, 119,
	 14, 15, 29,
	 16, 18, 25,
	 19, 21, 120,
	 22, 20, 19,
	 24, 25, 121,
	 17, 0, 18,
	 26, 27, 122,
	 5, 23, 22,
	 28, 29, 123,
	 30, 32, 40,
	 33, 35, 59,
	 36, 38, 124,
	 39, 40, 58,
	 41, 43, 125,
	 44, 34, 33,
	 46, 48, 56,
	 49, 51, 126,
	 50, 53, 51,
	 54, 47, 46,
	 56, 32, 31,
	 57, 58, 127,
	 52, 35, 53,
	 60, 45, 44,
	 62, 64, 89,
	 65, 67, 87,
	 68, 70, 74,
	 71, 73, 86,
	 74, 75, 79,
	 72, 77, 73,
	 78, 75, 83,
	 80, 77, 76,
	 82, 83, 88,
	 84, 81, 80,
	 65, 86, 66,
	 87, 69, 68,
	 63, 88, 64,
	 62, 85, 84,
	 90, 92, 116,
	 93, 95, 114,
	 96, 98, 115,
	 99, 101, 105,
	 102, 98, 97,
	 104, 101, 108,
	 102, 107, 103,
	 104, 109, 112,
	 106, 111, 107,
	 112, 113, 117,
	 93, 100, 99,
	 94, 115, 95,
	 90, 111, 110,
	 91, 113, 92,
	 128, 129, 130,
	 131, 132, 133,
	 134, 135, 136,
	 137, 136, 138,
	 139, 138, 128,
	 132, 131, 140,
	 128, 130, 141,
	 131, 133, 142,
	 134, 136, 137,
	 137, 138, 139,
	 139, 128, 141,
	 132, 140, 143,
};
#define _Sign_Corner_Small1_Plane_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Sign_Corner_Small1_Plane_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Sign_Corner_Small1_Plane_materials[2] =
{
	{
		{{ 0.800000f, 0.800000f, 0.800000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		0.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.450000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		1},
		"DarkGrey.011",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
	{
		{{ 0.800000f, 0.800000f, 0.800000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		0.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.450000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		1},
		"Texture_Signs.015",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Sign_Corner_Small1_Plane_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Sign_Corner_Small1_Plane_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Sign_Corner_Small1_Plane_batches[2][2] =
{
	{ 336, 0 },
	{ 36, 336 },
};
#define _Sign_Corner_Small1_Plane_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Sign_Corner_Small1_Plane_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Sign_Corner_Small1_Plane_meshes[2] =
{
	{
		"default",
		336,
		0,
		0,
	},
	{
		"default",
		36,
		336,
		1,
	},
};
#define _Sign_Corner_Small1_Plane_meshes_
#endif
