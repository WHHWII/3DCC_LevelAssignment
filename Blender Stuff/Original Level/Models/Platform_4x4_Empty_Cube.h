// "Platform_4x4_Empty_Cube.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Platform_4x4_Empty_Cube.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Platform_4x4_Empty_Cube_version_
const char Platform_4x4_Empty_Cube_version[4] = { '0','1','9','d' };
#define _Platform_4x4_Empty_Cube_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Platform_4x4_Empty_Cube_vertexcount_
const unsigned Platform_4x4_Empty_Cube_vertexcount = 146;
#define _Platform_4x4_Empty_Cube_vertexcount_
#endif
#ifndef _Platform_4x4_Empty_Cube_indexcount_
const unsigned Platform_4x4_Empty_Cube_indexcount = 228;
#define _Platform_4x4_Empty_Cube_indexcount_
#endif
#ifndef _Platform_4x4_Empty_Cube_materialcount_
const unsigned Platform_4x4_Empty_Cube_materialcount = 3; // can be used for batched draws
#define _Platform_4x4_Empty_Cube_materialcount_
#endif
#ifndef _Platform_4x4_Empty_Cube_meshcount_
const unsigned Platform_4x4_Empty_Cube_meshcount = 3;
#define _Platform_4x4_Empty_Cube_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Platform_4x4_Empty_Cube_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Platform_4x4_Empty_Cube_vertices[146] =
{
	{	{ 1.902747f, -0.120266f, 1.918291f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -1.902745f, -0.120266f, 1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -1.902745f, -0.120266f, -1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 1.902747f, 0.012625f, 1.918291f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.580900f, -0.814000f, -0.000000f }	},
	{	{ 1.902747f, 0.012625f, -1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.580900f, -0.814000f, -0.000000f }	},
	{	{ 1.931595f, 0.033214f, -1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.580900f, -0.814000f, -0.000000f }	},
	{	{ 1.931595f, 0.033214f, -1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.814000f, -0.580900f }	},
	{	{ 1.902747f, 0.012625f, -1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.814000f, -0.580900f }	},
	{	{ -1.902745f, 0.012625f, -1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.814000f, -0.580900f }	},
	{	{ -1.931593f, 0.033214f, -1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.580900f, -0.814000f, -0.000000f }	},
	{	{ -1.902745f, 0.012625f, -1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.580900f, -0.814000f, -0.000000f }	},
	{	{ -1.902745f, 0.012625f, 1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.580900f, -0.814000f, -0.000000f }	},
	{	{ -1.902745f, 0.012625f, 1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.814000f, 0.580900f }	},
	{	{ 1.902747f, 0.012625f, 1.918291f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.814000f, 0.580900f }	},
	{	{ 1.931595f, 0.033214f, 1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.814000f, 0.580900f }	},
	{	{ -1.817648f, 0.081734f, 1.833195f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 1.817650f, 0.081734f, 1.833195f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 1.817650f, 0.081734f, -1.833196f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 1.902747f, -0.044928f, -1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.008500f, -1.000000f, -0.000000f }	},
	{	{ 1.902747f, -0.044928f, 1.918291f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.008500f, -1.000000f, -0.000000f }	},
	{	{ 1.888468f, -0.045050f, 1.904012f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.008500f, -1.000000f, -0.000000f }	},
	{	{ 1.902747f, -0.062713f, 1.918291f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 1.902747f, -0.120266f, 1.918291f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 1.902747f, -0.120266f, -1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 1.902747f, -0.120266f, -1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -1.902745f, -0.120266f, -1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -1.902744f, -0.062713f, -1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -1.902744f, -0.044928f, 1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, 0.008500f }	},
	{	{ -1.888466f, -0.045050f, 1.904012f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, 0.008500f }	},
	{	{ 1.888468f, -0.045050f, 1.904012f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, 0.008500f }	},
	{	{ -1.902744f, -0.044928f, -1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.008500f, -1.000000f, -0.000000f }	},
	{	{ -1.888465f, -0.045050f, -1.904013f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.008500f, -1.000000f, -0.000000f }	},
	{	{ -1.888466f, -0.045050f, 1.904012f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.008500f, -1.000000f, -0.000000f }	},
	{	{ -1.902744f, -0.062713f, -1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.902745f, -0.120266f, -1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.902745f, -0.120266f, 1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.902744f, -0.062713f, 1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.000000f, 1.000000f }	},
	{	{ -1.902745f, -0.120266f, 1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.000000f, 1.000000f }	},
	{	{ 1.902747f, -0.120266f, 1.918291f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.000000f, 1.000000f }	},
	{	{ 1.902747f, -0.062713f, -1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.008500f }	},
	{	{ -1.902744f, -0.062713f, -1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.008500f }	},
	{	{ -1.888465f, -0.062591f, -1.904013f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.008500f }	},
	{	{ 1.888468f, -0.045050f, 1.904012f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 1.888468f, -0.062591f, 1.904012f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 1.888468f, -0.062591f, -1.904013f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 1.888468f, -0.045050f, -1.904013f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 1.888468f, -0.062591f, -1.904013f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -1.888465f, -0.062591f, -1.904013f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -1.888465f, -0.045050f, -1.904013f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.888465f, -0.062591f, -1.904013f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.888466f, -0.062591f, 1.904012f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.888466f, -0.045050f, 1.904012f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.000000f, 1.000000f }	},
	{	{ -1.888466f, -0.062591f, 1.904012f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.000000f, 1.000000f }	},
	{	{ 1.888468f, -0.062591f, 1.904012f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.000000f, 1.000000f }	},
	{	{ -1.902744f, -0.062713f, -1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.008500f, 1.000000f, -0.000000f }	},
	{	{ -1.902744f, -0.062713f, 1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.008500f, 1.000000f, -0.000000f }	},
	{	{ -1.888466f, -0.062591f, 1.904012f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.008500f, 1.000000f, -0.000000f }	},
	{	{ -1.902744f, -0.044928f, -1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.008500f }	},
	{	{ 1.902747f, -0.044928f, -1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.008500f }	},
	{	{ 1.888468f, -0.045050f, -1.904013f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.008500f }	},
	{	{ 1.902747f, -0.062713f, 1.918291f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.008500f, 1.000000f, -0.000000f }	},
	{	{ 1.902747f, -0.062713f, -1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.008500f, 1.000000f, -0.000000f }	},
	{	{ 1.888468f, -0.062591f, -1.904013f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.008500f, 1.000000f, -0.000000f }	},
	{	{ -1.902744f, -0.062713f, 1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, 0.008500f }	},
	{	{ 1.902747f, -0.062713f, 1.918291f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, 0.008500f }	},
	{	{ 1.888468f, -0.062591f, 1.904012f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, 0.008500f }	},
	{	{ 1.902747f, -0.120266f, -1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 1.931595f, 0.033214f, 1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.580900f, -0.814000f, -0.000000f }	},
	{	{ -1.931593f, 0.033214f, -1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.814000f, -0.580900f }	},
	{	{ -1.931593f, 0.033214f, 1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.580900f, -0.814000f, -0.000000f }	},
	{	{ -1.931593f, 0.033214f, 1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.814000f, 0.580900f }	},
	{	{ -1.817648f, 0.081734f, -1.833196f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 1.888468f, -0.045050f, -1.904013f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.008500f, -1.000000f, -0.000000f }	},
	{	{ 1.902747f, -0.062713f, -1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 1.902747f, -0.062713f, -1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 1.902747f, -0.044928f, 1.918291f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, 0.008500f }	},
	{	{ -1.902744f, -0.044928f, 1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.008500f, -1.000000f, -0.000000f }	},
	{	{ -1.902744f, -0.062713f, 1.918292f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ 1.902747f, -0.062713f, 1.918291f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.000000f, 1.000000f }	},
	{	{ 1.888468f, -0.062591f, -1.904013f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.008500f }	},
	{	{ 1.888468f, -0.045050f, -1.904013f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.888465f, -0.045050f, -1.904013f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -1.888466f, -0.045050f, 1.904012f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ 1.888468f, -0.045050f, 1.904012f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.000000f, 1.000000f }	},
	{	{ -1.888465f, -0.062591f, -1.904013f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.008500f, 1.000000f, -0.000000f }	},
	{	{ -1.888465f, -0.045050f, -1.904013f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.008500f }	},
	{	{ 1.888468f, -0.062591f, 1.904012f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.008500f, 1.000000f, -0.000000f }	},
	{	{ -1.888466f, -0.062591f, 1.904012f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, 0.008500f }	},
	{	{ -1.931593f, 0.103987f, -1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.931593f, 0.033214f, -1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.931593f, 0.033214f, 1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ 1.931595f, 0.103988f, 1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 1.931595f, 0.033214f, 1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 1.931595f, 0.033214f, -1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.931593f, 0.103988f, 1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.000000f, 1.000000f }	},
	{	{ -1.931593f, 0.033214f, 1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.000000f, 1.000000f }	},
	{	{ 1.931595f, 0.033214f, 1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.000000f, 1.000000f }	},
	{	{ 1.931595f, 0.103987f, -1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 1.931595f, 0.033214f, -1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -1.931593f, 0.033214f, -1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 1.931595f, 0.103987f, -1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 1.837064f, 0.103987f, -1.852610f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 1.837064f, 0.103988f, 1.852609f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -1.931593f, 0.103987f, -1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -1.931593f, 0.103988f, 1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -1.837062f, 0.103988f, 1.852609f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -1.837062f, 0.103987f, -1.852610f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.657400f, 0.753500f }	},
	{	{ -1.817648f, 0.081734f, -1.833196f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.657400f, 0.753500f }	},
	{	{ 1.817650f, 0.081734f, -1.833196f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.657400f, 0.753500f }	},
	{	{ -1.837062f, 0.103987f, -1.852610f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 1.931595f, 0.103988f, 1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 1.837064f, 0.103988f, 1.852609f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.753500f, 0.657400f, -0.000000f }	},
	{	{ 1.837064f, 0.103987f, -1.852610f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.753500f, 0.657400f, -0.000000f }	},
	{	{ 1.817650f, 0.081734f, -1.833196f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.753500f, 0.657400f, -0.000000f }	},
	{	{ -1.837062f, 0.103987f, -1.852610f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.753600f, 0.657400f, -0.000000f }	},
	{	{ -1.837062f, 0.103988f, 1.852609f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.753600f, 0.657400f, -0.000000f }	},
	{	{ -1.817648f, 0.081734f, 1.833195f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.753600f, 0.657400f, -0.000000f }	},
	{	{ -1.837062f, 0.103988f, 1.852609f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.657400f, -0.753600f }	},
	{	{ 1.837064f, 0.103988f, 1.852609f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.657400f, -0.753600f }	},
	{	{ 1.817650f, 0.081734f, 1.833195f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.657400f, -0.753600f }	},
	{	{ -1.931593f, 0.103988f, 1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ 1.931595f, 0.103987f, -1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 1.931595f, 0.103988f, 1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, -0.000000f, 1.000000f }	},
	{	{ -1.931593f, 0.103987f, -1.947140f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 1.837064f, 0.103987f, -1.852610f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.657400f, 0.753500f }	},
	{	{ 1.817650f, 0.081734f, 1.833195f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.753500f, 0.657400f, -0.000000f }	},
	{	{ -1.837062f, 0.103987f, -1.852610f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.753500f, 0.657400f, -0.000000f }	},
	{	{ -1.817648f, 0.081734f, 1.833195f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.753500f, 0.657400f, -0.000000f }	},
	{	{ -1.817648f, 0.081734f, -1.833196f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.753500f, 0.657400f, -0.000000f }	},
	{	{ -1.817648f, 0.081734f, 1.833195f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.000000f, 0.657400f, -0.753600f }	},
	{	{ -1.902745f, 0.012625f, -1.918292f },	{ 0.496405f, 0.692314f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.902744f, -0.044928f, -1.918292f },	{ 0.482286f, 0.718527f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.902744f, -0.044928f, 1.918292f },	{ 0.165603f, 0.718527f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ 1.902747f, 0.012625f, 1.918291f },	{ 0.532599f, 0.692314f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 1.902747f, -0.044928f, 1.918291f },	{ 0.518481f, 0.718527f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 1.902747f, -0.044928f, -1.918292f },	{ 0.835163f, 0.718527f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.902744f, -0.044928f, 1.918292f },	{ 0.521299f, 0.718527f, 0.000000f },	{ 0.000000f, -0.000000f, 1.000000f }	},
	{	{ 1.902747f, -0.044928f, 1.918291f },	{ 0.835415f, 0.718527f, 0.000000f },	{ 0.000000f, -0.000000f, 1.000000f }	},
	{	{ 1.902747f, 0.012625f, 1.918291f },	{ 0.849534f, 0.692314f, 0.000000f },	{ 0.000000f, -0.000000f, 1.000000f }	},
	{	{ 1.902747f, 0.012625f, -1.918292f },	{ 0.496657f, 0.692314f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 1.902747f, -0.044928f, -1.918292f },	{ 0.482538f, 0.718527f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -1.902744f, -0.044928f, -1.918292f },	{ 0.168422f, 0.718527f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -1.902745f, 0.012625f, 1.918292f },	{ 0.179722f, 0.692314f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ 1.902747f, 0.012625f, -1.918292f },	{ 0.849282f, 0.692314f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.902745f, 0.012625f, 1.918292f },	{ 0.535418f, 0.692314f, 0.000000f },	{ 0.000000f, -0.000000f, 1.000000f }	},
	{	{ -1.902745f, 0.012625f, -1.918292f },	{ 0.182541f, 0.692314f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
};
#define _Platform_4x4_Empty_Cube_vertices_
#endif
#ifndef _Platform_4x4_Empty_Cube_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Platform_4x4_Empty_Cube_indices[228] =
{
	 0, 1, 2,
	 3, 4, 5,
	 6, 7, 8,
	 9, 10, 11,
	 12, 13, 14,
	 15, 16, 17,
	 18, 19, 20,
	 21, 22, 23,
	 24, 25, 26,
	 27, 28, 29,
	 30, 31, 32,
	 33, 34, 35,
	 36, 37, 38,
	 39, 40, 41,
	 42, 43, 44,
	 45, 46, 47,
	 48, 49, 50,
	 51, 52, 53,
	 54, 55, 56,
	 57, 58, 59,
	 60, 61, 62,
	 63, 64, 65,
	 0, 2, 66,
	 3, 5, 67,
	 6, 8, 68,
	 9, 11, 69,
	 12, 14, 70,
	 15, 17, 71,
	 18, 20, 72,
	 21, 23, 73,
	 24, 26, 74,
	 27, 29, 75,
	 30, 32, 76,
	 33, 35, 77,
	 36, 38, 78,
	 39, 41, 79,
	 42, 44, 80,
	 45, 47, 81,
	 48, 50, 82,
	 51, 53, 83,
	 54, 56, 84,
	 57, 59, 85,
	 60, 62, 86,
	 63, 65, 87,
	 88, 89, 90,
	 91, 92, 93,
	 94, 95, 96,
	 97, 98, 99,
	 100, 101, 102,
	 103, 104, 105,
	 106, 107, 108,
	 100, 103, 109,
	 104, 110, 102,
	 111, 112, 113,
	 114, 115, 116,
	 117, 118, 119,
	 88, 90, 120,
	 91, 93, 121,
	 94, 96, 122,
	 97, 99, 123,
	 100, 102, 110,
	 103, 105, 109,
	 106, 108, 124,
	 100, 109, 101,
	 104, 102, 105,
	 111, 113, 125,
	 126, 127, 128,
	 117, 119, 129,
	 130, 131, 132,
	 133, 134, 135,
	 136, 137, 138,
	 139, 140, 141,
	 130, 132, 142,
	 133, 135, 143,
	 136, 138, 144,
	 139, 141, 145,
};
#define _Platform_4x4_Empty_Cube_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Platform_4x4_Empty_Cube_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Platform_4x4_Empty_Cube_materials[3] =
{
	{
		{{ 0.800000f, 0.800000f, 0.800000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		0.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.450000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		1},
		"Grey.009",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
	{
		{{ 0.800000f, 0.800000f, 0.800000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		0.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.450000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		1},
		"LightGrey.009",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
	{
		{{ 0.800000f, 0.800000f, 0.800000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		0.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.450000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		1},
		"Texture_Signs.005",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Platform_4x4_Empty_Cube_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Platform_4x4_Empty_Cube_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Platform_4x4_Empty_Cube_batches[3][2] =
{
	{ 132, 0 },
	{ 72, 132 },
	{ 24, 204 },
};
#define _Platform_4x4_Empty_Cube_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Platform_4x4_Empty_Cube_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Platform_4x4_Empty_Cube_meshes[3] =
{
	{
		"default",
		132,
		0,
		0,
	},
	{
		"default",
		72,
		132,
		1,
	},
	{
		"default",
		24,
		204,
		2,
	},
};
#define _Platform_4x4_Empty_Cube_meshes_
#endif
