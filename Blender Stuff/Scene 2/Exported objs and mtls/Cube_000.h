// "Cube_000.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Cube_000.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Cube_000_version_
const char Cube_000_version[4] = { '0','1','9','d' };
#define _Cube_000_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Cube_000_vertexcount_
const unsigned Cube_000_vertexcount = 66;
#define _Cube_000_vertexcount_
#endif
#ifndef _Cube_000_indexcount_
const unsigned Cube_000_indexcount = 120;
#define _Cube_000_indexcount_
#endif
#ifndef _Cube_000_materialcount_
const unsigned Cube_000_materialcount = 1; // can be used for batched draws
#define _Cube_000_materialcount_
#endif
#ifndef _Cube_000_meshcount_
const unsigned Cube_000_meshcount = 1;
#define _Cube_000_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Cube_000_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Cube_000_vertices[66] =
{
	{	{ -0.008434f, 1.163591f, 0.083177f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.016200f, 0.284200f, -0.958600f }	},
	{	{ -0.009235f, 1.054953f, 0.050987f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.016200f, 0.284200f, -0.958600f }	},
	{	{ -0.046062f, 1.055033f, 0.051633f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.016200f, 0.284200f, -0.958600f }	},
	{	{ -0.045261f, 1.163671f, 0.083823f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.016200f, 0.284200f, -0.958600f }	},
	{	{ -0.045449f, 1.047385f, 0.087533f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.453000f, -0.444500f, 0.772800f }	},
	{	{ -0.008365f, 1.044081f, 0.102016f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.453000f, -0.444500f, 0.772800f }	},
	{	{ -0.007010f, 1.145800f, 0.166679f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.453000f, -0.444500f, 0.772800f }	},
	{	{ -0.044258f, 1.151155f, 0.142569f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.453000f, -0.444500f, 0.772800f }	},
	{	{ -0.045449f, 1.047385f, 0.087533f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.999800f, 0.002200f, 0.017500f }	},
	{	{ -0.044258f, 1.151155f, 0.142569f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.999800f, 0.002200f, 0.017500f }	},
	{	{ -0.045261f, 1.163671f, 0.083823f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.999800f, 0.002200f, 0.017500f }	},
	{	{ -0.046062f, 1.055033f, 0.051633f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.999800f, 0.002200f, 0.017500f }	},
	{	{ -0.044258f, 1.151155f, 0.142569f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.005800f, 0.978100f, 0.208300f }	},
	{	{ -0.007010f, 1.145800f, 0.166679f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.005800f, 0.978100f, 0.208300f }	},
	{	{ -0.008434f, 1.163591f, 0.083177f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.005800f, 0.978100f, 0.208300f }	},
	{	{ -0.045261f, 1.163671f, 0.083823f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.005800f, 0.978100f, 0.208300f }	},
	{	{ -0.008365f, 1.044081f, 0.102016f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.005800f, -0.978100f, -0.208300f }	},
	{	{ -0.045449f, 1.047385f, 0.087533f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.005800f, -0.978100f, -0.208300f }	},
	{	{ -0.046062f, 1.055033f, 0.051633f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.005800f, -0.978100f, -0.208300f }	},
	{	{ -0.009235f, 1.054953f, 0.050987f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.005800f, -0.978100f, -0.208300f }	},
	{	{ -0.012176f, 1.087240f, 0.142789f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.833900f, -0.370500f, 0.409100f }	},
	{	{ -0.017665f, 1.129507f, 0.161287f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.833900f, -0.370500f, 0.409100f }	},
	{	{ -0.044671f, 1.136212f, 0.120903f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.833900f, -0.370500f, 0.409100f }	},
	{	{ -0.024214f, 1.092163f, 0.114109f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.833900f, -0.370500f, 0.409100f }	},
	{	{ -0.017665f, 1.129507f, 0.161287f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.005000f, 0.987000f, 0.160500f }	},
	{	{ -0.007143f, 1.129484f, 0.161103f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.005000f, 0.987000f, 0.160500f }	},
	{	{ -0.007844f, 1.136131f, 0.120257f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.005000f, 0.987000f, 0.160500f }	},
	{	{ -0.044671f, 1.136212f, 0.120903f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.005000f, 0.987000f, 0.160500f }	},
	{	{ -0.044671f, 1.136212f, 0.120903f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.017000f, 0.144700f, -0.989300f }	},
	{	{ -0.007844f, 1.136131f, 0.120257f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.017000f, 0.144700f, -0.989300f }	},
	{	{ -0.008053f, 1.092128f, 0.113826f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.017000f, 0.144700f, -0.989300f }	},
	{	{ -0.024214f, 1.092163f, 0.114109f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.017000f, 0.144700f, -0.989300f }	},
	{	{ -0.024214f, 1.092163f, 0.114109f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.005100f, -0.985900f, -0.167100f }	},
	{	{ -0.008053f, 1.092128f, 0.113826f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.005100f, -0.985900f, -0.167100f }	},
	{	{ -0.007557f, 1.087230f, 0.142707f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.005100f, -0.985900f, -0.167100f }	},
	{	{ -0.012176f, 1.087240f, 0.142789f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.005100f, -0.985900f, -0.167100f }	},
	{	{ -0.012176f, 1.087240f, 0.142789f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.014800f, -0.399100f, 0.916800f }	},
	{	{ -0.007557f, 1.087230f, 0.142707f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.015200f, -0.399200f, 0.916700f }	},
	{	{ -0.007143f, 1.129484f, 0.161103f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.015200f, -0.399200f, 0.916700f }	},
	{	{ -0.017665f, 1.129507f, 0.161287f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.014800f, -0.399100f, 0.916800f }	},
	{	{ 0.027591f, 1.054872f, 0.050342f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.016200f, 0.284200f, -0.958600f }	},
	{	{ 0.028393f, 1.163510f, 0.082532f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.016200f, 0.284200f, -0.958600f }	},
	{	{ -0.007010f, 1.145800f, 0.166679f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.477800f, -0.446600f, 0.756500f }	},
	{	{ -0.008365f, 1.044081f, 0.102016f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.477800f, -0.446600f, 0.756500f }	},
	{	{ 0.028203f, 1.047223f, 0.086242f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.477800f, -0.446600f, 0.756500f }	},
	{	{ 0.029395f, 1.150994f, 0.141278f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.477800f, -0.446600f, 0.756500f }	},
	{	{ 0.028393f, 1.163510f, 0.082532f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.999800f, -0.002200f, -0.017500f }	},
	{	{ 0.029395f, 1.150994f, 0.141278f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.999800f, -0.002200f, -0.017500f }	},
	{	{ 0.028203f, 1.047223f, 0.086242f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.999800f, -0.002200f, -0.017500f }	},
	{	{ 0.027591f, 1.054872f, 0.050342f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.999800f, -0.002200f, -0.017500f }	},
	{	{ 0.029395f, 1.150994f, 0.141278f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.005800f, 0.978100f, 0.208300f }	},
	{	{ 0.028393f, 1.163510f, 0.082532f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.005800f, 0.978100f, 0.208300f }	},
	{	{ 0.027591f, 1.054872f, 0.050342f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.005800f, -0.978100f, -0.208300f }	},
	{	{ 0.028203f, 1.047223f, 0.086242f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.005800f, -0.978100f, -0.208300f }	},
	{	{ 0.028983f, 1.136050f, 0.119612f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.846100f, -0.374200f, 0.379600f }	},
	{	{ 0.003379f, 1.129461f, 0.160919f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.846100f, -0.374200f, 0.379600f }	},
	{	{ -0.002940f, 1.087220f, 0.142627f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.846100f, -0.374200f, 0.379600f }	},
	{	{ 0.008108f, 1.092093f, 0.113542f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.846100f, -0.374200f, 0.379600f }	},
	{	{ 0.003379f, 1.129461f, 0.160919f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.005000f, 0.987000f, 0.160500f }	},
	{	{ 0.028983f, 1.136050f, 0.119612f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.005000f, 0.987000f, 0.160500f }	},
	{	{ 0.028983f, 1.136050f, 0.119612f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.017000f, 0.144700f, -0.989300f }	},
	{	{ 0.008108f, 1.092093f, 0.113542f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.017000f, 0.144700f, -0.989300f }	},
	{	{ 0.008108f, 1.092093f, 0.113542f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.005100f, -0.985900f, -0.167100f }	},
	{	{ -0.002940f, 1.087220f, 0.142627f },	{ 0.000000f, 1.000000f, 0.000000f },	{ -0.005100f, -0.985900f, -0.167100f }	},
	{	{ -0.002940f, 1.087220f, 0.142627f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.015100f, -0.399200f, 0.916700f }	},
	{	{ 0.003379f, 1.129461f, 0.160919f },	{ 0.000000f, 1.000000f, 0.000000f },	{ 0.015100f, -0.399200f, 0.916700f }	},
};
#define _Cube_000_vertices_
#endif
#ifndef _Cube_000_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Cube_000_indices[120] =
{
	 0, 1, 2,
	 3, 0, 2,
	 4, 5, 6,
	 7, 4, 6,
	 8, 9, 10,
	 11, 8, 10,
	 12, 13, 14,
	 15, 12, 14,
	 16, 17, 18,
	 19, 16, 18,
	 20, 21, 22,
	 23, 20, 22,
	 24, 25, 26,
	 27, 24, 26,
	 28, 29, 30,
	 31, 28, 30,
	 32, 33, 34,
	 35, 32, 34,
	 36, 37, 38,
	 39, 36, 38,
	 40, 1, 0,
	 41, 40, 0,
	 42, 43, 44,
	 45, 42, 44,
	 46, 47, 48,
	 49, 46, 48,
	 14, 13, 50,
	 51, 14, 50,
	 52, 53, 16,
	 19, 52, 16,
	 54, 55, 56,
	 57, 54, 56,
	 26, 25, 58,
	 59, 26, 58,
	 30, 29, 60,
	 61, 30, 60,
	 34, 33, 62,
	 63, 34, 62,
	 38, 37, 64,
	 65, 38, 64,
};
#define _Cube_000_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Cube_000_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Cube_000_materials[1] =
{
	{
		{{ 0.800000f, 0.800000f, 0.800000f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		224.999985f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Material.001",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Cube_000_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Cube_000_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Cube_000_batches[1][2] =
{
	{ 120, 0 },
};
#define _Cube_000_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Cube_000_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Cube_000_meshes[1] =
{
	{
		"default",
		120,
		0,
		0,
	},
};
#define _Cube_000_meshes_
#endif
